{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/confirmation/ConfirmationController.ts","src/confirmation/ConfirmationParams.ts","src/confirmation/ConfirmationService.ts","src/confirmation/index.ts","src/dependencies/translate.ts","src/dialogs.ts","src/error_details/ErrorDetailsController.ts","src/error_details/ErrorDetailsService.ts","src/error_details/ErrorParams.ts","src/error_details/ErrorStrings.ts","src/error_details/index.ts","src/information/InformationController.ts","src/information/InformationParams.ts","src/information/InformationService.ts","src/information/InformationStrings.ts","src/information/index.ts","src/options/OptionsBigController.ts","src/options/OptionsBigData.ts","src/options/OptionsBigParams.ts","src/options/OptionsBigService.ts","src/options/OptionsController.ts","src/options/OptionsData.ts","src/options/OptionsParams.ts","src/options/OptionsService.ts","src/options/index.ts","temp/pip-webui-dialogs-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dialogs","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ConfirmationParams_1","ConfirmationDialogController","$mdDialog","$injector","$rootScope","params","config","ConfirmationParams","_injector","initTranslate","theme","$inject","prototype","pipTranslate","has","get","translations","CONFIRM_TITLE","title","translate","ok","cancel","onOk","hide","onCancel","Object","defineProperty","value","ConfirmationService","_mdDialog","show","successCallback","cancelCallback","targetEvent","event","templateUrl","controller","controllerAs","locals","./ConfirmationParams","./ConfirmationService","5","thisModule","angular","filter","key","ErrorStrings_1","ErrorDetailsDialogController","ErrorStrings","$theme","error","OK","CANCEL","ERROR_DETAILS","CODE","PATH","ERROR","METHOD","MESSAGE","DISMISS","errorDetails","dismissButton","errorMessage","errorCode","errorMethod","errorPath","errorText","8","ErrorDetailsService","then","9","ErrorParams","10","11","./ErrorDetailsController","./ErrorDetailsService","./ErrorParams","./ErrorStrings","12","InformationDialogController","InformationStrings_1","InformationStrings","item","content","message","INFORMATION_TITLE","pipFormat","_","truncate","sprintf","13","InformationParams","InformationService","clickOutsideToClose","service","15","16","18","OptionsBigDialogController","onSelect","option","find","options","name","selectedOptionName","OptionsBigData_1","OptionsBigData","deleted","OptionsBigParams_1","OptionsBigParams","selectedOption","active","deletedTitle","noActions","noTitle","hint","focusInput","OPTIONS_TITLE","applyButtonTitle","onOptionSelect","stopPropagation","onSelected","optionIndex","onKeyUp","index","keyCode","preventDefault","undefined","list","$","focus","./OptionsBigData","./OptionsBigParams","19","21","OptionsBigService","OptionsDialogController","OptionsParams_1","OptionsParams","OptionsData_1","OptionsData","setTimeout","onKeyPress","./OptionsData","./OptionsParams","23","OptionsService","26","./IOptionsBigDialogController","./OptionsBigController","./OptionsBigService","./OptionsController","./OptionsService","27","run","$templateCache","put"],"mappings":"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","file":"pip-webui-dialogs.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { ConfirmationParams } from './ConfirmationParams';\n\nexport class ConfirmationDialogController {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public config: ConfirmationParams;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService,\n        params: ConfirmationParams) \n    {\n        \"ngInject\";\n        this.config = new ConfirmationParams();\n        this._injector = $injector;\n\n        this.initTranslate(params);\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope['$theme'];\n    }\n\n    private initTranslate(params: ConfirmationParams): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'CONFIRM_TITLE': 'Confirm' });\n            pipTranslate.translations('ru', { 'CONFIRM_TITLE': 'Подтвердите'});\n\n            this.config.title = pipTranslate.translate(params.title) || pipTranslate.translate('CONFIRM_TITLE');\n            this.config.ok = pipTranslate.translate(params.ok) || pipTranslate.translate('OK');\n            this.config.cancel = pipTranslate.translate(params.cancel) || ('CANCEL');\n        } else {\n            this.config.title = params.title || 'Confirm';\n            this.config.ok = params.ok || 'OK';\n            this.config.cancel = params.cancel || 'Cancel';\n        }\n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipConfirmationDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates'\n    ])\n    .controller('pipConfirmationDialogController', ConfirmationDialogController);","export class ConfirmationParams {\n    public ok: string = 'OK';\n    public title?: string; \n    public cancel: string = 'Cancel';\n    public event?: MouseEvent;\n}\n","import { ConfirmationParams } from './ConfirmationParams';\n\nexport interface IConfirmationService {\n    show(params: ConfirmationParams, successCallback?: () => void, cancelCallback?: () => void): any;\n}\n\nclass ConfirmationService implements IConfirmationService {\n    private _mdDialog: angular.material.IDialogService;\n    \n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params: ConfirmationParams, successCallback?: () => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'confirmation/ConfirmationDialog.html',\n            controller: 'pipConfirmationDialogController',\n            controllerAs: 'vm',\n            locals: { params: params },\n            clickOutsideToClose: true\n        })\n        .then(() => {\n            if (successCallback) {\n                successCallback();\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n    }\n    \n}\n\nangular\n    .module('pipConfirmationDialog')\n    .service('pipConfirmationDialog', ConfirmationService);","import './ConfirmationController';\nimport './ConfirmationService';\nimport './ConfirmationParams';\n","/**\n * @file Optional filter to translate string resources\n * @copyright Digital Living Software Corp. 2014-2016\n */\n \n/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipDialogs.Translate', []);\n\n    thisModule.filter('translate', function ($injector: ng.auto.IInjectorService) {\n        var pipTranslate: pip.services.ITranslateService = $injector.has('pipTranslate') \n            ? <pip.services.ITranslateService>$injector.get('pipTranslate') : null;\n\n        return function (key: string) {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    });\n\n})();\n","﻿/**\n * @file Registration of dialogs\n * @copyright Digital Living Software Corp. 2014-2016\n */\n\n/* global angular */\n\n'use strict';\n\nimport './error_details';\nimport './information';\nimport './options';\nimport './confirmation';\n\nangular\n    .module('pipDialogs', [\n        'pipInformationDialog',\n        'pipConfirmationDialog',\n        'pipOptionsDialog',\n        'pipOptionsBigDialog',\n        'pipErrorDetailsDialog',\n        //'pipErrorDetails2Dialog'\n    ]);\n\nexport * from './error_details';\n//export * from './error_details2';\nexport * from './information';\nexport * from './options';\nexport * from './confirmation';\n","import { ErrorStrings } from './ErrorStrings';\nimport { ErrorParams } from './ErrorParams';\n\nexport class ErrorDetailsDialogController {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: ng.material.IDialogService;\n    public theme: string;\n    public config: ErrorStrings;\n\n    constructor(\n        $mdDialog: ng.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService,\n        params: ErrorParams) {\n        \"ngInject\";\n        this.config = new ErrorStrings();\n        this._injector = $injector;\n\n        this.initTranslate(params);\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope.$theme;\n        this.config.error = params.error;\n    }\n\n    private initTranslate(params: ErrorParams): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', {\n                'OK': 'Ok',\n                'CANCEL': 'Cancel',\n                'ERROR_DETAILS': 'Error details',\n                'CODE': 'Error code',\n                'PATH': 'Path',\n                'ERROR': 'Error',\n                'METHOD': 'Method',\n                'MESSAGE': 'Message',\n                'DISMISS': 'Dismiss'\n            });\n            pipTranslate.translations('ru', {\n                'OK': 'Ок',\n                'CANCEL': 'Отмена',\n                'ERROR_DETAILS': 'Детали ошибки',\n                'CODE': 'Код ошибки',\n                'PATH': 'Путь',\n                'ERROR': 'Ошибка',\n                'METHOD': 'Метод',\n                'MESSAGE': 'Сообщение'\n            });\n            this.config.ok = pipTranslate.translate(params.ok) || pipTranslate.translate('OK');\n            this.config.cancel = pipTranslate.translate(params.cancel) || pipTranslate.translate('CANCEL');\n            this.config.errorDetails = pipTranslate.translate('ERROR_DETAILS');\n            this.config.dismissButton = pipTranslate.translate('DISMISS');\n            this.config.errorMessage = pipTranslate.translate('MESSAGE');\n            this.config.errorCode = pipTranslate.translate('CODE');\n            this.config.errorMethod = pipTranslate.translate('METHOD');\n            this.config.errorPath = pipTranslate.translate('PATH');\n            this.config.errorText = pipTranslate.translate('ERROR');\n        } else {\n            this.config.ok = params.ok || 'Ok';\n            this.config.cancel = params.cancel || 'Cancel';\n        }\n    }\n    \n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipErrorDetailsDialog')\n    .controller('pipErrorDetailsDialogController', ErrorDetailsDialogController);","class ErrorDetailsService {\n    public _mdDialog: angular.material.IDialogService;\n\n    public constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    \n    public show(params, successCallback, cancelCallback) {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'error_details/ErrorDetails.html',\n            controller: 'pipErrorDetailsDialogController',\n            controllerAs: 'vm',\n            locals: {params: params},\n            clickOutsideToClose: true\n         })\n        .then(() => {\n            if (successCallback) {\n                successCallback();\n            }\n        }, () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipErrorDetailsDialog')\n    .service('pipErrorDetailsDialog', ErrorDetailsService);","export class ErrorParams {\n    public ok: string = 'OK';\n    public cancel: string = 'CANCEL';\n    public error: string = 'ERROR';\n}","export class ErrorStrings {\n    public ok: string = 'OK';\n    public cancel: string = 'Cancel';\n    public errorDetails: string = 'Error details';\n    public dismissButton: string = 'Dismiss';\n    public errorMessage: string = 'Message';\n    public errorCode: string = 'Code';\n    public errorMethod: string = 'Method';\n    public errorPath: string = 'Path';\n    public error: string = 'Error';\n    public errorText: string = 'Error';   \n}","angular\n    .module('pipErrorDetailsDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './ErrorParams';\nimport './ErrorStrings';\nimport './ErrorDetailsService';\nimport './ErrorDetailsController';\n","import { InformationParams } from './InformationParams';\nimport { InformationStrings } from './InformationStrings';\n\nexport class InformationDialogController {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public config: InformationStrings;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService, \n        params: InformationParams) \n    {\n        \"ngInject\";\n        this.config = new InformationStrings();\n        this._injector = $injector;\n\n        this.initTranslate(params)\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope['$theme'];\n        this.config.error = params.error;\n    }\n\n    private initTranslate(params: InformationParams): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        let content = params.message, item;\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'INFORMATION_TITLE': 'Information'});\n            pipTranslate.translations('ru', { 'INFORMATION_TITLE': 'Информация' });\n\n            this.config.title = pipTranslate.translate(params.title) || pipTranslate.translate('INFORMATION_TITLE');\n            this.config.ok = pipTranslate.translate(params.ok) || pipTranslate.translate('OK');\n            content = pipTranslate.translate(content);\n        } else {\n            this.config.title = params.title || 'Information';\n            this.config.ok = params.ok || 'OK';\n        }\n\n        let pipFormat: pip.services.IFormat = this._injector.has('pipFormat') ? <pip.services.IFormat>this._injector.get('pipFormat') : null;\n\n        if (params.item && pipFormat) {\n            item = _.truncate(params.item, 25);\n            content = pipFormat.sprintf(content, item);\n        }\n\n        this.config.content = content;        \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipInformationDialog')\n    .controller('pipInformationDialogController', InformationDialogController);","export class InformationParams {\n    public ok: string = 'OK';\n    public title?: string; \n    public message?: string;\n    public error?: string;\n    public item: any;\n}","export interface IInformationService {\n    show(params, successCallback?: () => void, cancelCallback?: () => void): any;\n}\n\nclass InformationService implements IInformationService {\n    private _mdDialog: angular.material.IDialogService;\n    \n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params, successCallback?: () => void, cancelCallback?: () => void) {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'information/InformationDialog.html',\n            controller: 'pipInformationDialogController',\n            controllerAs: 'vm',\n            locals: { params: params},\n            clickOutsideToClose: true\n         })\n        .then(function () {\n            if (successCallback) {\n                successCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipInformationDialog')\n    .service('pipInformationDialog', InformationService);","export class InformationStrings {\n    public ok: string = 'OK';\n    public title: string; \n    public message: string;\n    public error: string;\n    public content;\n}\n","angular\n    .module('pipInformationDialog', [\n        'ngMaterial',\n        'pipDialogs.Translate', \n        'pipDialogs.Templates']);\n\nimport './InformationParams';\nimport './InformationStrings';\nimport './InformationService';\nimport './InformationController';\n","import { OptionsBigParams } from './OptionsBigParams';\nimport { OptionsBigData } from './OptionsBigData';\nimport { IOptionsBigDialogController } from './IOptionsBigDialogController';\n\nexport class OptionsBigDialogController implements IOptionsBigDialogController {\n    private _injector: ng.auto.IInjectorService;\n\n    private $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public config: OptionsBigParams;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService, \n        $rootScope: ng.IRootScopeService, \n        params: OptionsBigParams) \n    {\n        \"ngInject\";\n\n        this.$mdDialog = $mdDialog;\n        this.config = new OptionsBigParams();\n        this._injector = $injector;\n\n        this.initTranslate(params)\n\n        this.theme = $rootScope['$theme'];\n        \n        this.config.options = params.options;\n        this.config.selectedOption = _.find(params.options, {active: true}) || new OptionsBigData();\n        this.config.selectedOptionName = this.config.selectedOption.name;\n        this.config.deleted = params.deleted;\n        this.config.deletedTitle = params.deletedTitle;\n        this.config.noActions = params.noActions || false;\n        this.config.noTitle = params.noTitle || false;\n        this.config.hint = params.hint || '';\n\n        setTimeout(this.focusInput, 500);\n    }\n\n    private initTranslate(params: OptionsBigParams): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option'});\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию'});\n\n            this.config.title =  pipTranslate.translate(params.title) || pipTranslate.translate('OPTIONS_TITLE');\n            this.config.applyButtonTitle = pipTranslate.translate(params.applyButtonTitle) || pipTranslate.translate('SELECT');\n        } else {\n            this.config.title = params.title || 'Choose Option';\n            this.config.applyButtonTitle = params.applyButtonTitle || 'Select';\n        }        \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsBigData) {\n        event.stopPropagation();\n        this.config.selectedOptionName = option.name;\n\n        if (this.config.noActions) {\n            this.onSelect();\n        }\n    }\n\n    public onSelected() {\n        this.config.selectedOptionName = this.config.options[this.config.optionIndex].name;\n\n        if (this.config.noActions) {\n               this.onSelect();\n        }\n    }\n\n    public onKeyUp(event: JQueryKeyEventObject, index: number) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            event.stopPropagation();\n            event.preventDefault();\n            if (index !== undefined && index > -1 && index < this.config.options.length) {\n                this.config.selectedOptionName = this.config.options[index].name;\n                this.onSelect();\n            }\n        }\n    }\n    \n    public onSelect = function () {\n        let option: OptionsBigData;\n        option = <OptionsBigData>_.find(this.config.options, {name: this.config.selectedOptionName}) || new OptionsBigData();\n        this.$mdDialog.hide({option: option, deleted: this.config.deleted});\n    };\n\n\n    private focusInput() {\n        let list;\n        list = $('.pip-options-dialog .pip-list');\n        list.focus();\n    }\n\n}\n\nangular\n    .module('pipOptionsBigDialog')\n    .controller('pipOptionsBigDialogController', OptionsBigDialogController);","export class OptionsBigData {\n    public name: string;\n    public title: string;\n    public subtitle: string;\n}\n","import { OptionsBigData } from './OptionsBigData';\n\nexport class OptionsBigParams {\n    public title?: string;  \n    public applyButtonTitle?: string;\n    public options?: OptionsBigData[];\n    public selectedOption?: OptionsBigData;\n    public deleted?: boolean;\n    public selectedOptionName?: string;\n    public deletedTitle?: string;\n    public hint?: string;\n    public noTitle: boolean = false;\n    public noActions: boolean = false;\n    public optionIndex: number = 0;\n}\n","export interface IOptionsBigService {\n    show(params, successCallback?: (option) => void, cancelCallback?: () => void): any;\n}\n\nclass OptionsBigService implements IOptionsBigService {\n    public _mdDialog: angular.material.IDialogService;\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    public show(params, successCallback?: (option) => void, cancelCallback?: () => void): any {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'options/OptionsBigDialog.html',\n            controller: 'pipOptionsBigDialogController',\n            controllerAs: 'vm',\n            locals: {params: params},\n            clickOutsideToClose: true\n         })\n        .then((option) => {\n            if (successCallback) {\n                successCallback(option);\n            }\n        }, () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n    }\n    \n}\n\nangular\n    .module('pipOptionsBigDialog')\n    .service('pipOptionsBigDialog', OptionsBigService);","import { OptionsData } from './OptionsData';\nimport { OptionsParams } from './OptionsParams';\n\nexport class OptionsDialogController {\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public config: OptionsParams;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService, \n        $rootScope: ng.IRootScopeService, \n        params: OptionsParams) {\n        \"ngInject\";\n\n        this.$mdDialog = $mdDialog;\n        this.config = new OptionsParams();\n        var pipTranslate: pip.services.ITranslateService = $injector.has('pipTranslate') ? <pip.services.ITranslateService>$injector.get('pipTranslate') : null;\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option'});\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию'});\n\n            this.config.title = pipTranslate.translate(params.title) || pipTranslate.translate('OPTIONS_TITLE');\n            this.config.applyButtonTitle = pipTranslate.translate(params.applyButtonTitle) || pipTranslate.translate('SELECT');\n        } else {\n            this.config.title = params.title || 'Choose Option';\n            this.config.applyButtonTitle = params.applyButtonTitle || 'Select';\n        }\n\n        this.theme = $rootScope['$theme'];\n        this.config.options = params.options;\n        this.config.selectedOption = _.find(params.options, {active: true}) || new OptionsData();\n        this.config.selectedOptionName = this.config.selectedOption.name;\n        this.config.deleted = params.deleted;\n        this.config.deletedTitle = params.deletedTitle;\n\n        setTimeout(this.focusInput, 500);\n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsData) {\n        event.stopPropagation();\n        this.config.selectedOptionName = option.name;\n    }\n            \n    public onKeyPress (event: JQueryKeyEventObject) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.onSelect();\n        }\n    }\n\n    public onSelect() {\n        let option: OptionsData;\n        option = _.find(this.config.options, {name: this.config.selectedOptionName});\n\n        this.$mdDialog.hide({option: option, deleted: this.config.deleted});\n    }\n\n    private focusInput() {\n        let list;\n        list = $('.pip-options-dialog .pip-list');\n        list.focus();\n    }\n\n}\n\nangular\n    .module('pipOptionsDialog')\n    .controller('pipOptionsDialogController', OptionsDialogController);","\nexport class OptionsData {\n    public icon: string = 'star';\n    public name: string;\n    public title: string;\n    public active: boolean = true; \n}\n","import { OptionsData } from './OptionsData';\n\nexport class OptionsParams {\n    public title?: string;  \n    public applyButtonTitle?: string;\n    public options?: OptionsData[];\n    public selectedOption?: OptionsData;\n    public deleted?: boolean;\n    public selectedOptionName?: string;\n    public deletedTitle?: string;\n}","\nexport interface IOptionsService {\n    show(params, successCallback?: (option) => void, cancelCallback?: () => void): any;\n}\n\nclass OptionsService implements IOptionsService {\n    public _mdDialog: angular.material.IDialogService;\n    public constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    public  show(params, successCallback?: (option) => void, cancelCallback?: () => void): any {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'options/OptionsDialog.html',\n            controller: 'pipOptionsDialogController',\n            controllerAs: 'vm',\n            locals: {params: params},\n            clickOutsideToClose: true\n         })\n        .then((option) => {\n            if (successCallback) {\n                successCallback(option.option);\n            }\n        }, () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipOptionsDialog')\n    .service('pipOptionsDialog', OptionsService);","\nangular\n    .module('pipOptionsDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './OptionsService';\nimport './OptionsController';\n\n\nangular\n    .module('pipOptionsBigDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './OptionsBigParams';\nimport './OptionsBigData';\nimport './OptionsData';\nimport './OptionsParams';\nimport './IOptionsBigDialogController';        \nimport './OptionsBigService';\nimport './OptionsBigController';","(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('confirmation/ConfirmationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-confirmation-dialog layout-column\" width=\"400\" md-theme=\"{{ ::vm.theme }}\"><div class=\"pip-header\"><h3>{{ :: vm.config.title }}</h3></div><div class=\"pip-footer\"><div><md-button ng-click=\"vm.onCancel()\">{{ :: vm.config.cancel }}</md-button><md-button class=\"md-accent\" ng-click=\"vm.onOk()\">{{ :: vm.config.ok }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('error_details/ErrorDetails.html',\n    '<md-dialog class=\"pip-dialog pip-error-details-dialog layout-column\" width=\"400\" md-theme=\"{{vm.theme}}\"><div class=\"pip-body\"><div class=\"pip-header\"><h3>{{::vm.config.errorDetails | translate}}</h3></div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"vm.config.error.code || (vm.config.error.data && error.data.code)\">{{::vm.config.errorCode | translate}}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"vm.config.error.code || (vm.config.error.data && vm.config.error.data.code)\">{{vm.config.error.code || vm.config.error.data.code}}</div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"vm.config.error.path || (vm.config.error.data && vm.config.error.data.path)\">{{::vm.config.errorPath | translate}}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"vm.config.error.path || (vm.config.error.data && vm.config.error.data.path)\">{{vm.config.error.path || vm.config.error.data.path}}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"vm.config.error.error || (vm.config.error.data && vm.config.error.data.error)\">{{::vm.config.errorText | translate}}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"vm.config.error.error || (vm.config.error.data && vm.config.error.data.error)\">{{vm.config.error.error || vm.config.error.data.error}}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"vm.config.error.method || (vm.config.error.data && vm.config.error.data.method)\">{{::vm.config.errorMethod | translate}}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"vm.config.error.method || (vm.config.error.data && vm.config.error.data.method)\">{{vm.config.error.method || vm.config.error.data.method}}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"vm.config.error.message || (vm.config.error.data && vm.config.error.data.message)\">{{::vm.config.errorMessage | translate}}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"vm.config.error.message || (vm.config.error.data && vm.config.error.data.message)\">{{vm.config.error.message || vm.config.error.data.message}}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent m0\" ng-click=\"vm.onOk()\">{{::vm.config.dismissButton | translate}}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('information/InformationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-information-dialog layout-column\" width=\"400\" md-theme=\"{{vm.theme}}\"><div class=\"pip-header\"><h3>{{:: vm.config.title | translate }}</h3></div><div class=\"pip-body\"><div class=\"pip-content\">{{ vm.config.content }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent\" ng-click=\"vm.onOk()\">{{ vm.config.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options/OptionsBigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog-big layout-column\" min-width=\"400\" md-theme=\"{{vm.theme}}\"><md-dialog-content class=\"pip-body pip-scroll\" ng-class=\"{\\'bp24\\': !vm.config.noActions}\"><div class=\"pip-header\" ng-class=\"{\\'header-hint\\': vm.config.noTitle && vm.config.hint}\"><h3 class=\"m0\" ng-if=\"!vm.config.noTitle\">{{::vm.config.title | translate}}</h3><div ng-show=\"vm.config.noTitle && vm.config.hint\" class=\"dialog-hint layout-row layout-align-start-center\"><div class=\"hint-icon-container flex-fixed\"><md-icon md-svg-icon=\"icons:info-circle-outline\"></md-icon></div><div>{{::vm.config.hint | translate}}</div></div></div><div class=\"content-divider\" ng-if=\"!noTitle\"></div><div class=\"pip-content\"><div class=\"spacer8\" ng-if=\"noTitle && hint\"></div><md-list class=\"pip-menu pip-ref-list\" pip-selected=\"vm.config.optionIndex\" index=\"{{vm.config.optionIndex }}\" pip-select=\"vm.onSelected($event)\"><md-list-item class=\"pip-ref-list-item pip-selectable layout-row layout-align-start-center\" ng-class=\"{\\'selected md-focused\\' : option.name == selectedOptionName, \\'divider-bottom\\': $index != options.length - 1}\" md-ink-ripple=\"\" ng-keyup=\"vm.onKeyUp($event, $index)\" ng-repeat=\"option in vm.config.options\"><div class=\"pip-content content-stretch\" ng-click=\"vm.onOptionSelect($event, option)\"><p class=\"pip-title spacer-right\" ng-if=\"option.title\" style=\"margin-bottom: 4px !important;\">{{::option.title | translate}}</p><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.subtitle\">{{::option.subtitle | translate}}</div><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.text\" ng-bind-html=\"option.text | translate\"></div></div></md-list-item></md-list></div><div class=\"spacer8\" ng-if=\"vm.config.noActions\"></div></md-dialog-content><div class=\"pip-footer\" ng-if=\"!vm.config.noActions\"><div><md-button class=\"pip-cancel\" ng-click=\"vm.onCancel()\">{{::\\'CANCEL\\' | translate}}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"vm.onSelect()\" style=\"margin-right: -6px\">{{::vm.config.applyButtonTitle | translate}}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options/OptionsDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog layout-column\" min-width=\"400\" md-theme=\"{{vm.theme}}\"><md-dialog-content class=\"pip-body lp0 tp0 rp0 bp24 pip-scroll\"><div class=\"pip-header\"><h3>{{::vm.config.title | translate}}</h3><div ng-show=\"vm.config.deletedTitle\" class=\"header-option text-subhead1 divider-bottom\"><md-checkbox ng-model=\"deleted\" aria-label=\"CHECKBOX\">{{::vm.config.deletedTitle | translate}}</md-checkbox></div></div><div class=\"pip-content\"><md-radio-group ng-model=\"vm.config.selectedOptionName\" class=\"pip-list md-primary\" md-no-ink=\"true\" ng-keypress=\"vm.onKeyPress($event)\" tabindex=\"0\"><div ng-repeat=\"option in vm.config.options\" class=\"pip-list-item\" md-ink-ripple=\"\" ui-event=\"{ click: \\'vm.onOptionSelect($event, option)\\' }\" ng-class=\"{ selected: option.name == vm.config.selectedOptionName }\"><div class=\"pip-list-item item-padding\"><md-icon class=\"pip-option-icon\" md-svg-icon=\"icons:{{option.icon}}\" ng-if=\"option.icon\"></md-icon><div class=\"pip-option-title\">{{::option.title | translate}}</div><md-radio-button ng-value=\"option.name\" tabindex=\"-1\" aria-label=\"{{::option.title | translate}}\"></md-radio-button></div></div></md-radio-group></div></md-dialog-content><div class=\"pip-footer\"><div><md-button class=\"pip-cancel\" ng-click=\"vm.onCancel()\">{{::\\'CANCEL\\' | translate}}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"vm.onSelect()\">{{::vm.config.applyButtonTitle | translate}}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dialogs-html.min.js.map\n"]}