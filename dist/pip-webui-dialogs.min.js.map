{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/confirmation/ConfirmationDialogController.ts","src/confirmation/ConfirmationDialogParams.ts","src/confirmation/ConfirmationDialogService.ts","src/confirmation/index.ts","src/dependencies/translate.ts","src/dialogs.ts","src/error_details/ErrorDetailsDialogController.ts","src/error_details/ErrorDetailsDialogService.ts","src/error_details/ErrorDialogParams.ts","src/error_details/ErrorDialogStrings.ts","src/error_details/index.ts","src/information/InformationDialogController.ts","src/information/InformationDialogParams.ts","src/information/InformationDialogService.ts","src/information/InformationDialogStrings.ts","src/information/index.ts","src/options/OptionsBigDialogController.ts","src/options/OptionsBigDialogData.ts","src/options/OptionsBigDialogParams.ts","src/options/OptionsBigDialogResult.ts","src/options/OptionsBigDialogService.ts","src/options/OptionsDialogController.ts","src/options/OptionsDialogData.ts","src/options/OptionsDialogParams.ts","src/options/OptionsDialogResult.ts","src/options/OptionsDialogService.ts","src/options/index.ts","temp/pip-webui-dialogs-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dialogs","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ConfirmationDialogParams_1","ConfirmationDialogController","_super","$mdDialog","$injector","$rootScope","_this","_injector","initTranslate","__extends","$inject","prototype","pipTranslate","has","get","translations","CONFIRM_TITLE","title","translate","ok","cancel","onOk","hide","onCancel","ConfirmationDialogParams","Object","defineProperty","value","ConfirmationService","_mdDialog","show","params","successCallback","cancelCallback","targetEvent","event","templateUrl","controller","controllerAs","locals","bindToController","./ConfirmationDialogParams","./ConfirmationDialogService","5","thisModule","angular","filter","key","ErrorDialogStrings_1","ErrorDialogParams_1","ErrorDetailsDialogController","strings","ErrorDialogStrings","theme","$theme","error","OK","CANCEL","ERROR_DETAILS","CODE","PATH","ERROR","METHOD","MESSAGE","DISMISS","dismissButton","errorDetails","errorMessage","errorCode","errorMethod","errorPath","errorText","isString","_","getErrorText","toString","data","ErrorDialogParams","./ErrorDialogParams","./ErrorDialogStrings","8","ErrorDetailsService","then","9","10","11","d","b","create","__","InformationDialogController","item","content","message","INFORMATION_TITLE","pipFormat","sprintf","13","InformationDialogParams","InformationService","clickOutsideToClose","service","15","InformationDialogStrings","16","constructor","extendStatics","OptionsBigDialogController","onSelect","option","find","options","name","selectedOptionName","OptionsBigDialogData_1","OptionsBigDialogData","selectedOption","active","opt","optionIndex","index","focusInput","OPTIONS_TITLE","onOptionSelect","stopPropagation","noActions","onSelected","onKeyUp","keyCode","preventDefault","undefined","list","$","./OptionsBigDialogData","./OptionsBigDialogParams","18","19","OptionsBigDialogParams","20","OptionsBigDialogResult","21","OptionsBigDialogService","result","p","hasOwnProperty","OptionsDialogController","findIndex","onKeyPress","isCheckboxOption","OptionsDialogParams","./OptionsDialogParams","23","OptionsDialogData","OptionsDialogResult","OptionsDialogService","27","./OptionsBigDialogController","./OptionsBigDialogResult","./OptionsBigDialogService","./OptionsDialogController","./OptionsDialogData","./OptionsDialogResult","./OptionsDialogService","28","run","$templateCache","put"],"mappings":"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","file":"pip-webui-dialogs.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { ConfirmationDialogParams } from './ConfirmationDialogParams';\n\nclass ConfirmationDialogController extends  ConfirmationDialogParams {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();\n        this._injector = $injector;\n\n        this.initTranslate();\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope['$theme'];\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'CONFIRM_TITLE': 'Confirm' });\n            pipTranslate.translations('ru', { 'CONFIRM_TITLE': 'Подтвердите'});\n\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('CONFIRM_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('OK');\n            this.cancel = pipTranslate.translate(this.cancel) || ('CANCEL');\n        } else {\n            this.title = this.title || 'Confirm';\n            this.ok = this.ok || 'OK';\n            this.cancel = this.cancel || 'Cancel';\n        }\n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipConfirmationDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates'\n    ])\n    .controller('pipConfirmationDialogController', ConfirmationDialogController);","export class ConfirmationDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Confirm button caption\n    public ok?: string;\n    // Dialog title\n    public title?: string; \n    // Cancel button caption\n    public cancel?: string;\n}\n","import { ConfirmationDialogParams } from './ConfirmationDialogParams';\n\nexport interface IConfirmationService {\n    show(params: ConfirmationDialogParams, successCallback?: () => void, cancelCallback?: () => void): any;\n}\n\nclass ConfirmationService implements IConfirmationService {\n    private _mdDialog: angular.material.IDialogService;\n    \n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params: ConfirmationDialogParams, successCallback?: () => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'confirmation/ConfirmationDialog.html',\n            controller: 'pipConfirmationDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,\n            clickOutsideToClose: true\n        })\n        .then(() => {\n            if (successCallback) {\n                successCallback();\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n    }\n    \n}\n\nangular\n    .module('pipConfirmationDialog')\n    .service('pipConfirmationDialog', ConfirmationService);","import './ConfirmationDialogController';\nimport './ConfirmationDialogService';\nimport './ConfirmationDialogParams';\n","/**\n * @file Optional filter to translate string resources\n * @copyright Digital Living Software Corp. 2014-2016\n */\n \n/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipDialogs.Translate', []);\n\n    thisModule.filter('translate', function ($injector: ng.auto.IInjectorService) {\n        var pipTranslate: pip.services.ITranslateService = $injector.has('pipTranslate') \n            ? <pip.services.ITranslateService>$injector.get('pipTranslate') : null;\n\n        return function (key: string) {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    });\n\n})();\n","﻿import './error_details';\nimport './information';\nimport './options';\nimport './confirmation';\n\nangular\n    .module('pipDialogs', [\n        'pipInformationDialog',\n        'pipConfirmationDialog',\n        'pipOptionsDialog',\n        'pipOptionsBigDialog',\n        'pipErrorDetailsDialog'\n    ]);\n\nexport * from './error_details';\nexport * from './information';\nexport * from './options';\nexport * from './confirmation';\n","import { ErrorDialogStrings } from './ErrorDialogStrings';\nimport { ErrorDialogParams } from './ErrorDialogParams';\n\nclass ErrorDetailsDialogController extends ErrorDialogParams {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: ng.material.IDialogService;\n    public theme: string;\n    public strings: ErrorDialogStrings;\n\n    constructor(\n        $mdDialog: ng.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n        \n        super();\n\n        this.strings = new ErrorDialogStrings();\n        this._injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope.$theme;\n\n        this.initTranslate();\n\n        if (!this.error) {\n            this.error = '<none>';             \n        }\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', {\n                'OK': 'Ok',\n                'CANCEL': 'Cancel',\n                'ERROR_DETAILS': 'Error details',\n                'CODE': 'Error code',\n                'PATH': 'Path',\n                'ERROR': 'Error',\n                'METHOD': 'Method',\n                'MESSAGE': 'Message',\n                'DISMISS': 'Dismiss'\n            });\n            pipTranslate.translations('ru', {\n                'OK': 'Ок',\n                'CANCEL': 'Отмена',\n                'ERROR_DETAILS': 'Детали ошибки',\n                'CODE': 'Код ошибки',\n                'PATH': 'Путь',\n                'ERROR': 'Ошибка',\n                'METHOD': 'Метод',\n                'MESSAGE': 'Сообщение'\n            });\n            this.dismissButton = pipTranslate.translate(this.dismissButton) || pipTranslate.translate('DISMISS');\n\n            this.strings.errorDetails = pipTranslate.translate('ERROR_DETAILS');\n            this.strings.errorMessage = pipTranslate.translate('MESSAGE');\n            this.strings.errorCode = pipTranslate.translate('CODE');\n            this.strings.errorMethod = pipTranslate.translate('METHOD');\n            this.strings.errorPath = pipTranslate.translate('PATH');\n            this.strings.errorText = pipTranslate.translate('ERROR');\n        } else {\n            this.dismissButton = this.dismissButton || 'Dismiss';\n        }\n    }\n    \n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public isString(error): boolean {\n        return _.isString(error);\n    }\n\n    public getErrorText(): string {\n        let error: string;\n\n        if (_.isString(this.error)) { \n            return this.error\n        } \n        if (this.error && this.error.error) {\n            return this.error.error.toString();\n        }\n        if (this.error && this.error.data && this.error.data.error) {\n            return this.error.data.error.toString();\n        }\n        \n        return '<none>';\n    }\n\n}\n\nangular\n    .module('pipErrorDetailsDialog')\n    .controller('pipErrorDetailsDialogController', ErrorDetailsDialogController);","import { ErrorDialogParams } from './ErrorDialogParams';\n\nexport interface IConfirmationService {\n    show(params: ErrorDialogParams, successCallback?: () => void, cancelCallback?: () => void): any;\n}\n\nclass ErrorDetailsService {\n    public _mdDialog: angular.material.IDialogService;\n\n    public constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    \n    public show(params: ErrorDialogParams, successCallback?: () => void, cancelCallback?: () => void) {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'error_details/ErrorDetails.html',\n            controller: 'pipErrorDetailsDialogController',\n            controllerAs: '$ctrl',\n            locals: params, \n            bindToController: true,\n            clickOutsideToClose: true\n         })\n        .then(() => {\n            if (successCallback) {\n                successCallback();\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipErrorDetailsDialog')\n    .service('pipErrorDetailsDialog', ErrorDetailsService);","export class ErrorDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Close button label\n    public dismissButton?: string;\n    // Error object or string\n    public error: any;\n}","export class ErrorDialogStrings {\n    public errorDetails: string = 'Error details';\n    public errorMessage: string = 'Message';\n    public errorCode: string = 'Code';\n    public errorMethod: string = 'Method';\n    public errorPath: string = 'Path';\n    public errorText: string = 'Error';   \n}\n","angular\n    .module('pipErrorDetailsDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './ErrorDialogParams';\nimport './ErrorDialogStrings';\nimport './ErrorDetailsDialogService';\nimport './ErrorDetailsDialogController';\n","import { InformationDialogParams } from './InformationDialogParams';\nimport { InformationDialogStrings } from './InformationDialogStrings';\n\nclass InformationDialogController extends InformationDialogParams {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public content: string;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();        \n        this._injector = $injector;\n\n        this.initTranslate()\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope['$theme'];\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        let content: string = this.message;\n        let item: string;\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'INFORMATION_TITLE': 'Information'});\n            pipTranslate.translations('ru', { 'INFORMATION_TITLE': 'Информация' });\n\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('INFORMATION_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('OK');\n            content = pipTranslate.translate(content);\n        } else {\n            this.title = this.title || 'Information';\n            this.ok = this.ok || 'OK';\n        }\n\n        let pipFormat: pip.services.IFormat = this._injector.has('pipFormat') ? <pip.services.IFormat>this._injector.get('pipFormat') : null;\n\n        if (this.item && pipFormat) {\n            // item = _.truncate(params.item, 25);\n            content = pipFormat.sprintf(content, item);\n        }\n\n        this.content = content;        \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipInformationDialog')\n    .controller('pipInformationDialogController', InformationDialogController);","export class InformationDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Confirm button caption\n    public ok?: string;\n    // Dialog title\n    public title?: string; \n    // Dialog messag. You can use formatting options (%s, %d etc.). \n    public message: string;\n    // Paramentrs for message string\n    public item?: any;\n}","import { InformationDialogParams } from './InformationDialogParams';\n\nexport interface IInformationService {\n    show(params: InformationDialogParams, successCallback?: () => void, cancelCallback?: () => void): any;\n}\n\nclass InformationService implements IInformationService {\n    private _mdDialog: angular.material.IDialogService;\n    \n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params, successCallback?: () => void, cancelCallback?: () => void) {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'information/InformationDialog.html',\n            controller: 'pipInformationDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,\n            clickOutsideToClose: true\n         })\n        .then(function () {\n            if (successCallback) {\n                successCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipInformationDialog')\n    .service('pipInformationDialog', InformationService);","export class InformationDialogStrings {\n    public ok: string = 'OK';\n    public title: string; \n    public message: string;\n    public error: string;\n    public content;\n}\n","angular\n    .module('pipInformationDialog', [\n        'ngMaterial',\n        'pipDialogs.Translate', \n        'pipDialogs.Templates']);\n\nimport './InformationDialogParams';\nimport './InformationDialogStrings';\nimport './InformationDialogService';\nimport './InformationDialogController';\n","import { OptionsBigDialogParams } from './OptionsBigDialogParams';\nimport { OptionsBigDialogData } from './OptionsBigDialogData';\n\nclass OptionsBigDialogController extends OptionsBigDialogParams {\n    private _injector: ng.auto.IInjectorService;\n    private $mdDialog: angular.material.IDialogService;\n\n    public theme: string;\n    public optionIndex: number;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService, \n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();\n        this.$mdDialog = $mdDialog;\n        this._injector = $injector;\n        this.theme = $rootScope['$theme'];\n\n        this.initTranslate()\n\n        this.selectedOption = _.find(this.options, {active: true}) || null;\n        let name: string = this.selectedOption ? this.selectedOption.name : this.selectedOptionName;\n        let index: number = _.findIndex(this.options, (opt: OptionsBigDialogData) => {\n            return opt.name == name;\n        });\n        this.optionIndex = index == -1 ? 0 : index;\n        this.selectedOption = this.options[this.optionIndex];\n        this.selectedOptionName = this.selectedOption.name;\n\n        setTimeout(this.focusInput, 500);\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option' });\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию' });\n\n            this.title =  pipTranslate.translate(this.title) || pipTranslate.translate('OPTIONS_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('SELECT');\n        } else {\n            this.title = this.title || 'Choose Option';\n            this.ok = this.ok || 'Select';\n        }        \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsBigDialogData) {\n        event.stopPropagation();\n        this.selectedOptionName = option.name;\n\n        if (this.noActions) {\n            this.onSelect();\n        }\n    }\n\n    public onSelected() {\n        this.selectedOptionName = this.options[this.optionIndex].name;\n\n        if (this.noActions) {\n               this.onSelect();\n        }\n    }\n\n    public onKeyUp(event: JQueryKeyEventObject, index: number) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            event.stopPropagation();\n            event.preventDefault();\n            if (index !== undefined && index > -1 && index < this.options.length) {\n                this.selectedOptionName = this.options[index].name;\n                this.onSelect();\n            }\n        }\n    }\n    \n    public onSelect = function () {\n        let option: OptionsBigDialogData;\n        option = <OptionsBigDialogData>_.find(this.options, { name: this.selectedOptionName }) || new OptionsBigDialogData();\n        this.$mdDialog.hide({ option: option });\n    };\n\n\n    private focusInput() {\n        let list;\n        list = $('.pip-options-dialog .pip-list');\n        list.focus();\n    }\n\n}\n\nangular\n    .module('pipOptionsBigDialog')\n    .controller('pipOptionsBigDialogController', OptionsBigDialogController);\n","export class OptionsBigDialogData {\n    public name: string;\n    public title: string;\n    public subtitle: string;\n}\n","import { OptionsBigDialogData } from './OptionsBigDialogData';\n\nexport class OptionsBigDialogParams {\n    // Mouse event\n    public event?: MouseEvent;   \n    // Dialog title \n    public title?: string;  \n    // confirm button title\n    public ok?: string;\n    // Dialog options array\n    public options?: OptionsBigDialogData[];\n    // Selected option by default\n    public selectedOption?: OptionsBigDialogData;\n    // Selected Option Name\n    public selectedOptionName?: string;    \n    // Dialog hint title\n    public hint?: string;\n    // Show title\n    public noTitle;\n    // Show action button\n    public noActions;\n}\n\n","import { OptionsBigDialogData } from './OptionsBigDialogData';\n\nexport class OptionsBigDialogResult {\n    public option: OptionsBigDialogData;\n    public isCheckboxOption: boolean;\n}\n","import { OptionsBigDialogParams } from './OptionsBigDialogParams';\nimport { OptionsBigDialogResult } from './OptionsBigDialogResult';\n\nexport interface IOptionsBigDialogService {\n    show(params: OptionsBigDialogParams, successCallback?: (result: OptionsBigDialogResult) => void, cancelCallback?: () => void): any;\n}\n\nclass OptionsBigDialogService implements IOptionsBigDialogService {\n    public _mdDialog: angular.material.IDialogService;\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    public show(params, successCallback?: (result: OptionsBigDialogResult) => void, cancelCallback?: () => void): any {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'options/OptionsBigDialog.html',\n            controller: 'pipOptionsBigDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,        \n            clickOutsideToClose: true\n         })\n        .then((result: OptionsBigDialogResult) => {\n            if (successCallback) {\n                successCallback(result);\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n    }\n    \n}\n\nangular\n    .module('pipOptionsBigDialog')\n    .service('pipOptionsBigDialog', OptionsBigDialogService);","import { OptionsDialogData } from './OptionsDialogData';\nimport { OptionsDialogParams } from './OptionsDialogParams';\nimport { OptionsDialogResult } from './OptionsDialogResult';\n\nclass OptionsDialogController extends OptionsDialogParams {\n    private _injector: ng.auto.IInjectorService;\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public optionIndex: number;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService, \n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();\n        this.$mdDialog = $mdDialog;\n        this._injector = $injector;\n        this.theme = $rootScope['$theme'];\n        this.options = this.options || [];\n\n        this.initTranslate();\n        \n        this.selectedOption = _.find(this.options, {active: true}) || null;\n        let name: string = this.selectedOption ? this.selectedOption.name : this.selectedOptionName;\n        let index: number = _.findIndex(this.options, (opt: OptionsDialogData) => {\n            return opt.name == name;\n        });\n        this.optionIndex = index == -1 ? 0 : index;\n        this.selectedOption = this.options[this.optionIndex];\n        this.selectedOptionName = this.selectedOption.name;\n\n        setTimeout(this.focusInput, 500);\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option' });\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию' });\n\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('OPTIONS_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('SELECT');\n        } else {\n            this.title = this.title || 'Choose Option';\n            this.ok = this.ok || 'Select';\n        }\n              \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsDialogData) {\n        event.stopPropagation();\n        this.selectedOptionName = option.name;\n    }\n            \n    public onKeyPress (event: JQueryKeyEventObject) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.onSelect();\n        }\n    }\n\n    public onSelect() {\n        let option: OptionsDialogData;\n        option = _.find(this.options, { name: this.selectedOptionName });\n\n        this.$mdDialog.hide({ option: option, isCheckboxOption: this.isCheckboxOption });\n    }\n\n    private focusInput() {\n        let list;\n        list = $('.pip-options-dialog .pip-list');\n        list.focus();\n    }\n\n}\n\nangular\n    .module('pipOptionsDialog')\n    .controller('pipOptionsDialogController', OptionsDialogController);","\nexport class OptionsDialogData {\n    public icon: string = 'star';\n    public name: string;\n    public title: string;\n    public active: boolean = true; \n}\n","import { OptionsDialogData } from './OptionsDialogData';\n\nexport class OptionsDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Dialog title \n    public title?: string;\n    // confirm button title\n    public ok?: string;\n    // Dialog options array\n    public options?: OptionsDialogData[];\n    // Selected option by default\n    public selectedOption?: OptionsDialogData;\n    // Selected Option Name\n    public selectedOptionName?: string;\n    // Value for checkbox option\n    public isCheckboxOption?: boolean;\n    // Checkbox caption, Checkbox visible if caption is set\n    public checkboxOptionCaption?: string;\n}\n","import { OptionsDialogData } from './OptionsDialogData';\n\nexport class OptionsDialogResult {\n    public option: OptionsDialogData;\n    public isCheckboxOption: boolean;\n}\n","import { OptionsDialogParams } from './OptionsDialogParams';\nimport { OptionsDialogResult } from './OptionsDialogResult';\n\nexport interface IOptionsDialogService {\n    show(params: OptionsDialogParams, successCallback?: (result: OptionsDialogResult) => void, cancelCallback?: () => void): any;\n}\n\nclass OptionsDialogService implements IOptionsDialogService {\n    public _mdDialog: angular.material.IDialogService;\n    public constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    public  show(params: OptionsDialogParams, successCallback?: (result: OptionsDialogResult) => void, cancelCallback?: () => void): any {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'options/OptionsDialog.html',\n            controller: 'pipOptionsDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,\n            clickOutsideToClose: true\n         })\n        .then((result: OptionsDialogResult) => {\n            if (successCallback) {\n                successCallback(result);\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipOptionsDialog')\n    .service('pipOptionsDialog', OptionsDialogService);","\nangular\n    .module('pipOptionsDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './OptionsDialogData';\nimport './OptionsDialogParams';\nimport './OptionsDialogResult';\nimport './OptionsDialogService';\nimport './OptionsDialogController';\n\n\nangular\n    .module('pipOptionsBigDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './OptionsBigDialogParams';\nimport './OptionsBigDialogData';\nimport './OptionsBigDialogResult';\nimport './OptionsBigDialogService';\nimport './OptionsBigDialogController';","(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('confirmation/ConfirmationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-confirmation-dialog layout-column\" width=\"400\" md-theme=\"{{ ::$ctrl.theme }}\"><div class=\"pip-header\"><h3>{{ :: $ctrl.title }}</h3></div><div class=\"pip-footer\"><div><md-button ng-click=\"$ctrl.onCancel()\">{{ :: $ctrl.cancel }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onOk()\">{{ :: $ctrl.ok }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('error_details/ErrorDetails.html',\n    '<md-dialog class=\"pip-dialog pip-error-details-dialog layout-column\" width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><div class=\"pip-body\"><div class=\"pip-header\"><h3>{{ ::$ctrl.strings.errorDetails | translate }}</h3></div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"$ctrl.error.code || ($ctrl.error.data && $ctrl.error.data.code)\">{{ ::$ctrl.strings.errorCode | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.code || ($ctrl.error.data && $ctrl.error.data.code)\">{{ $ctrl.error.code || $ctrl.error.data.code }}</div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"$ctrl.error.path || ($ctrl.error.data && $ctrl.error.data.path)\">{{ ::$ctrl.strings.errorPath | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.path || ($ctrl.error.data && $ctrl.error.data.path)\">{{ $ctrl.error.path || $ctrl.error.data.path }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.isString($ctrl.error) || $ctrl.error.error || ($ctrl.error.data && $ctrl.error.data.error)\">{{ ::$ctrl.strings.errorText | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.error || ($ctrl.error.data && $ctrl.error.data.error)\">{{ $ctrl.getErrorText() }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.error.method || ($ctrl.error.data && $ctrl.error.data.method)\">{{ ::$ctrl.strings.errorMethod | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.method || ($ctrl.error.data && $ctrl.error.data.method)\">{{ $ctrl.error.method || $ctrl.error.data.method }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.error.message || ($ctrl.error.data && $ctrl.error.data.message)\">{{ ::$ctrl.strings.errorMessage | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.message || ($ctrl.error.data && $ctrl.error.data.message)\">{{ $ctrl.error.message || $ctrl.error.data.message }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent m0\" ng-click=\"$ctrl.onOk()\">{{ ::$ctrl.dismissButton | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options/OptionsBigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog-big layout-column\" min-width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body pip-scroll\" ng-class=\"{\\'bp24\\': !$ctrl.noActions}\"><div class=\"pip-header\" ng-class=\"{\\'header-hint\\': $ctrl.noTitle && $ctrl.hint}\"><h3 class=\"m0\" ng-if=\"!$ctrl.noTitle\">{{ ::$ctrl.title | translate }}</h3><div ng-show=\"$ctrl.noTitle && $ctrl.hint\" class=\"dialog-hint layout-row layout-align-start-center\"><div class=\"hint-icon-container flex-fixed\"><md-icon md-svg-icon=\"icons:info-circle-outline\"></md-icon></div><div>{{ ::$ctrl.hint | translate }}</div></div></div><div class=\"content-divider\" ng-if=\"!noTitle\"></div><div class=\"pip-content\"><div class=\"spacer8\" ng-if=\"noTitle && hint\"></div><md-list class=\"pip-menu pip-ref-list\" pip-selected=\"$ctrl.optionIndex\" index=\"{{ $ctrl.optionIndex }}\" pip-select=\"$ctrl.onSelected($event)\"><md-list-item class=\"pip-ref-list-item pip-selectable layout-row layout-align-start-center\" ng-class=\"{\\'selected md-focused\\' : option.name == $ctrl.selectedOptionName, \\'divider-bottom\\': $index != options.length - 1}\" md-ink-ripple=\"\" ng-keyup=\"$ctrl.onKeyUp($event, $index)\" ng-repeat=\"option in $ctrl.options\"><div class=\"pip-content content-stretch\" ng-click=\"$ctrl.onOptionSelect($event, option)\"><p class=\"pip-title spacer-right\" ng-if=\"option.title\" style=\"margin-bottom: 4px !important;\">{{ ::option.title | translate }}</p><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.subtitle\">{{ ::option.subtitle | translate }}</div><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.text\" ng-bind-html=\"option.text | translate\"></div></div></md-list-item></md-list></div><div class=\"spacer8\" ng-if=\"$ctrl.noActions\"></div></md-dialog-content><div class=\"pip-footer\" ng-if=\"!$ctrl.noActions\"><div><md-button class=\"pip-cancel\" ng-click=\"$ctrl.onCancel()\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"$ctrl.onSelect()\" style=\"margin-right: -6px\">{{ ::$ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options/OptionsDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog layout-column\" min-width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body lp0 tp0 rp0 bp24 pip-scroll\"><div class=\"pip-header\"><h3>{{ ::$ctrl.title | translate }}</h3><div ng-show=\"$ctrl.checkboxOptionCaption\" class=\"header-option text-subhead1 divider-bottom\"><md-checkbox ng-model=\"$ctrl.isCheckboxOption\" aria-label=\"CHECKBOX\">{{ ::$ctrl.checkboxOptionCaption | translate }}</md-checkbox></div></div><div class=\"pip-content\"><md-radio-group ng-model=\"$ctrl.selectedOptionName\" class=\"pip-list md-primary\" md-no-ink=\"true\" ng-keypress=\"$ctrl.onKeyPress($event)\" tabindex=\"0\"><div ng-repeat=\"option in $ctrl.options\" class=\"pip-list-item\" md-ink-ripple=\"\" ui-event=\"{ click: \\'$ctrl.onOptionSelect($event, option)\\' }\" ng-class=\"{ selected: option.name == $ctrl.selectedOptionName }\"><div class=\"pip-list-item item-padding\"><md-icon class=\"pip-option-icon\" md-svg-icon=\"icons:{{ option.icon }}\" ng-if=\"option.icon\"></md-icon><div class=\"pip-option-title\">{{ ::option.title | translate }}</div><md-radio-button ng-value=\"option.name\" tabindex=\"-1\" aria-label=\"{{ ::option.title | translate }}\"></md-radio-button></div></div></md-radio-group></div></md-dialog-content><div class=\"pip-footer\"><div><md-button class=\"pip-cancel\" ng-click=\"$ctrl.onCancel()\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"$ctrl.onSelect()\">{{ ::$ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('information/InformationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-information-dialog layout-column\" width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><div class=\"pip-header\"><h3>{{:: $ctrl.title | translate }}</h3></div><div class=\"pip-body\"><div class=\"pip-content\">{{ $ctrl.content }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onOk()\">{{ $ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dialogs-html.min.js.map\n"]}