{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/confirmation/ConfirmationDialogController.ts","src/confirmation/ConfirmationDialogParams.ts","src/confirmation/ConfirmationDialogService.ts","src/confirmation/index.ts","src/dependencies/TranslateFilter.ts","src/error_details/ErrorDetailsDialogController.ts","src/error_details/ErrorDetailsDialogParams.ts","src/error_details/ErrorDetailsDialogService.ts","src/error_details/index.ts","src/index.ts","src/information/InformationDialogController.ts","src/information/InformationDialogParams.ts","src/information/InformationDialogService.ts","src/information/index.ts","src/options/OptionsDialogController.ts","src/options/OptionsDialogData.ts","src/options/OptionsDialogParams.ts","src/options/OptionsDialogResult.ts","src/options/OptionsDialogService.ts","src/options/index.ts","src/options_big/OptionsBigDialogController.ts","src/options_big/OptionsBigDialogData.ts","src/options_big/OptionsBigDialogParams.ts","src/options_big/OptionsBigDialogResult.ts","src/options_big/OptionsBigDialogService.ts","src/options_big/index.ts","temp/pip-webui-dialogs-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dialogs","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ConfirmationDialogParams_1","ConfirmationDialogController","_super","$mdDialog","$injector","$rootScope","_this","_injector","initTranslate","__extends","$inject","prototype","pipTranslate","has","get","translations","CONFIRM_TITLE","title","translate","ok","cancel","onOk","hide","onCancel","ConfirmationDialogParams","Object","defineProperty","value","ConfirmationDialogService","_mdDialog","show","params","successCallback","cancelCallback","targetEvent","event","templateUrl","controller","controllerAs","locals","bindToController","./ConfirmationDialogParams","./ConfirmationDialogService","./IConfirmationDialogService","6","key","angular","ErrorDialogStrings","errorDetails","errorMessage","errorCode","errorMethod","errorPath","errorText","ErrorDetailsDialogController","strings","theme","$theme","error","OK","CANCEL","ERROR_DETAILS","CODE","PATH","ERROR","METHOD","MESSAGE","DISMISS","dismissButton","isString","_","getErrorText","toString","data","8","ErrorDetailsDialogParams","9","ErrorDetailsDialogService","clickOutsideToClose","then","__export","m","p","hasOwnProperty","__","constructor","d","b","create","InformationDialogController","item","content","message","INFORMATION_TITLE","pipFormat","sprintf","13","InformationDialogParams","14","InformationDialogService","15","extendStatics","OptionsDialogController","options","selectedOption","find","active","index","findIndex","opt","name","optionIndex","selectedOptionName","focusInput","OPTIONS_TITLE","onOptionSelect","option","stopPropagation","onKeyPress","keyCode","preventDefault","onSelect","isCheckboxOption","list","OptionsDialogParams_1","OptionsDialogParams","17","OptionsDialogData","18","19","OptionsDialogResult","OptionsDialogService","result","service","21","__proto__","Array","OptionsBigDialogController","OptionsBigDialogData_1","OptionsBigDialogData","noActions","onSelected","onKeyUp","undefined","OptionsBigDialogParams","OptionsBigDialogResult","OptionsBigDialogService","27","./OptionsBigDialogController","./OptionsBigDialogData","./OptionsBigDialogParams","./OptionsBigDialogResult","./OptionsBigDialogService","28","run","$templateCache","put"],"mappings":"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","file":"pip-webui-dialogs.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { ConfirmationDialogParams } from './ConfirmationDialogParams';\n\nclass ConfirmationDialogController extends  ConfirmationDialogParams {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();\n        this._injector = $injector;\n\n        this.initTranslate();\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope['$theme'];\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') \n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'CONFIRM_TITLE': 'Confirm' });\n            pipTranslate.translations('ru', { 'CONFIRM_TITLE': 'Подтвердите'});\n\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('CONFIRM_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('OK');\n            this.cancel = pipTranslate.translate(this.cancel) || ('CANCEL');\n        } else {\n            this.title = this.title || 'Confirm';\n            this.ok = this.ok || 'OK';\n            this.cancel = this.cancel || 'Cancel';\n        }\n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipConfirmationDialog')\n    .controller('pipConfirmationDialogController', ConfirmationDialogController);","export class ConfirmationDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Confirm button caption\n    public ok?: string;\n    // Dialog title\n    public title?: string; \n    // Cancel button caption\n    public cancel?: string;\n}\n","import { ConfirmationDialogParams } from './ConfirmationDialogParams';\nimport { IConfirmationDialogService } from './IConfirmationDialogService';\n\nclass ConfirmationDialogService implements IConfirmationDialogService {\n    private _mdDialog: angular.material.IDialogService;\n    \n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params: ConfirmationDialogParams, successCallback?: () => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'confirmation/ConfirmationDialog.html',\n            controller: 'pipConfirmationDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,\n            clickOutsideToClose: true\n        })\n        .then(() => {\n            if (successCallback) {\n                successCallback();\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n    }\n    \n}\n\nangular\n    .module('pipConfirmationDialog')\n    .service('pipConfirmationDialog', ConfirmationDialogService);","angular\n    .module('pipConfirmationDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './ConfirmationDialogParams';\nimport './ConfirmationDialogController';\nimport './IConfirmationDialogService';\nimport './ConfirmationDialogService';\n\nexport * from './IConfirmationDialogService';\n","{\n\nfunction translate($injector: ng.auto.IInjectorService) {\n    var pipTranslate: pip.services.ITranslateService = $injector.has('pipTranslate') \n        ? <pip.services.ITranslateService>$injector.get('pipTranslate') : null;\n\n    return function (key: string) {\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\n    }\n}\n\nangular\n    .module('pipDialogs.Translate', [])\n    .filter('translate', translate);\n\n}","import { ErrorDetailsDialogParams } from './ErrorDetailsDialogParams';\n\nclass ErrorDialogStrings {\n    public errorDetails: string = 'Error details';\n    public errorMessage: string = 'Message';\n    public errorCode: string = 'Code';\n    public errorMethod: string = 'Method';\n    public errorPath: string = 'Path';\n    public errorText: string = 'Error';   \n}\n\nclass ErrorDetailsDialogController extends ErrorDetailsDialogParams {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: ng.material.IDialogService;\n    public theme: string;\n    public strings: ErrorDialogStrings;\n\n    constructor(\n        $mdDialog: ng.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n        \n        super();\n\n        this.strings = new ErrorDialogStrings();\n        this._injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope.$theme;\n\n        this.initTranslate();\n\n        if (!this.error) {\n            this.error = '<none>';             \n        }\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') \n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', {\n                'OK': 'Ok',\n                'CANCEL': 'Cancel',\n                'ERROR_DETAILS': 'Error details',\n                'CODE': 'Error code',\n                'PATH': 'Path',\n                'ERROR': 'Error',\n                'METHOD': 'Method',\n                'MESSAGE': 'Message',\n                'DISMISS': 'Dismiss'\n            });\n            pipTranslate.translations('ru', {\n                'OK': 'Ок',\n                'CANCEL': 'Отмена',\n                'ERROR_DETAILS': 'Детали ошибки',\n                'CODE': 'Код ошибки',\n                'PATH': 'Путь',\n                'ERROR': 'Ошибка',\n                'METHOD': 'Метод',\n                'MESSAGE': 'Сообщение'\n            });\n            this.dismissButton = pipTranslate.translate(this.dismissButton) || pipTranslate.translate('DISMISS');\n\n            this.strings.errorDetails = pipTranslate.translate('ERROR_DETAILS');\n            this.strings.errorMessage = pipTranslate.translate('MESSAGE');\n            this.strings.errorCode = pipTranslate.translate('CODE');\n            this.strings.errorMethod = pipTranslate.translate('METHOD');\n            this.strings.errorPath = pipTranslate.translate('PATH');\n            this.strings.errorText = pipTranslate.translate('ERROR');\n        } else {\n            this.dismissButton = this.dismissButton || 'Dismiss';\n        }\n    }\n    \n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public isString(error): boolean {\n        return _.isString(error);\n    }\n\n    public getErrorText(): string {\n        let error: string;\n\n        if (_.isString(this.error)) { \n            return this.error\n        } \n        if (this.error && this.error.error) {\n            return this.error.error.toString();\n        }\n        if (this.error && this.error.data && this.error.data.error) {\n            return this.error.data.error.toString();\n        }\n        \n        return '<none>';\n    }\n\n}\n\nangular\n    .module('pipErrorDetailsDialog')\n    .controller('pipErrorDetailsDialogController', ErrorDetailsDialogController);","export class ErrorDetailsDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Close button label\n    public dismissButton?: string;\n    // Error object or string\n    public error: any;\n}","import { ErrorDetailsDialogParams } from './ErrorDetailsDialogParams';\nimport { IErrorDetailsDialogService } from './IErrorDetailsDialogService';\n\nclass ErrorDetailsDialogService implements IErrorDetailsDialogService {\n    public _mdDialog: angular.material.IDialogService;\n\n    public constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    \n    public show(params: ErrorDetailsDialogParams, \n        successCallback?: () => void, cancelCallback?: () => void) {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'error_details/ErrorDetailsDialog.html',\n            controller: 'pipErrorDetailsDialogController',\n            controllerAs: '$ctrl',\n            locals: params, \n            bindToController: true,\n            clickOutsideToClose: true\n         })\n        .then(() => {\n            if (successCallback) {\n                successCallback();\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipErrorDetailsDialog')\n    .service('pipErrorDetailsDialog', ErrorDetailsDialogService);","angular\n    .module('pipErrorDetailsDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './ErrorDetailsDialogParams';\nimport './ErrorDetailsDialogService';\nimport './ErrorDetailsDialogController';\n\nexport * from './ErrorDetailsDialogParams';\nexport * from './IErrorDetailsDialogService';","﻿import './dependencies/TranslateFilter';\nimport './error_details';\nimport './information';\nimport './options';\nimport './options_big';\nimport './confirmation';\n\nangular\n    .module('pipDialogs', [\n        'pipInformationDialog',\n        'pipConfirmationDialog',\n        'pipOptionsDialog',\n        'pipOptionsBigDialog',\n        'pipErrorDetailsDialog'\n    ]);\n\nexport * from './error_details';\nexport * from './information';\nexport * from './confirmation';\nexport * from './options';\nexport * from './options_big';\n","import { InformationDialogParams } from './InformationDialogParams';\n\nclass InformationDialogController extends InformationDialogParams {\n    private _injector: ng.auto.IInjectorService;\n\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public content: string;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService,\n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();        \n        this._injector = $injector;\n\n        this.initTranslate()\n\n        this.$mdDialog = $mdDialog;\n        this.theme = $rootScope['$theme'];\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') \n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        let content: string = this.message;\n        let item: string;\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'INFORMATION_TITLE': 'Information'});\n            pipTranslate.translations('ru', { 'INFORMATION_TITLE': 'Информация' });\n\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('INFORMATION_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('OK');\n            content = pipTranslate.translate(content);\n        } else {\n            this.title = this.title || 'Information';\n            this.ok = this.ok || 'OK';\n        }\n\n        let pipFormat: pip.services.IFormat = this._injector.has('pipFormat') \n            ? <pip.services.IFormat>this._injector.get('pipFormat') : null;\n\n        if (this.item && pipFormat) {\n            // item = _.truncate(params.item, 25);\n            content = pipFormat.sprintf(content, item);\n        }\n\n        this.content = content;        \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n}\n\nangular\n    .module('pipInformationDialog')\n    .controller('pipInformationDialogController', InformationDialogController);","export class InformationDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Confirm button caption\n    public ok?: string;\n    // Dialog title\n    public title?: string; \n    // Dialog messag. You can use formatting options (%s, %d etc.). \n    public message: string;\n    // Paramentrs for message string\n    public item?: any;\n}","import { InformationDialogParams } from './InformationDialogParams';\nimport { IInformationDialogService } from './IInformationDialogService';\n\nclass InformationDialogService implements IInformationDialogService {\n    private _mdDialog: angular.material.IDialogService;\n    \n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params, successCallback?: () => void, cancelCallback?: () => void) {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'information/InformationDialog.html',\n            controller: 'pipInformationDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,\n            clickOutsideToClose: true\n         })\n        .then(function () {\n            if (successCallback) {\n                successCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipInformationDialog')\n    .service('pipInformationDialog', InformationDialogService);","angular\n    .module('pipInformationDialog', [\n        'ngMaterial',\n        'pipDialogs.Translate', \n        'pipDialogs.Templates']);\n\nimport './InformationDialogParams';\nimport './InformationDialogController';\nimport './InformationDialogService';\n\n\nexport * from './IInformationDialogService';\nexport * from './InformationDialogParams';\n","import { OptionsDialogData } from './OptionsDialogData';\nimport { OptionsDialogParams } from './OptionsDialogParams';\nimport { OptionsDialogResult } from './OptionsDialogResult';\n\nclass OptionsDialogController extends OptionsDialogParams {\n    private _injector: ng.auto.IInjectorService;\n    public $mdDialog: angular.material.IDialogService;\n    public theme: string;\n    public optionIndex: number;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService, \n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();\n        this.$mdDialog = $mdDialog;\n        this._injector = $injector;\n        this.theme = $rootScope['$theme'];\n        this.options = this.options || [];\n\n        this.initTranslate();\n        \n        this.selectedOption = _.find(this.options, {active: true}) || null;\n        let name: string = this.selectedOption ? this.selectedOption.name : this.selectedOptionName;\n        let index: number = _.findIndex(this.options, (opt: OptionsDialogData) => {\n            return opt.name == name;\n        });\n        this.optionIndex = index == -1 ? 0 : index;\n        this.selectedOption = this.options[this.optionIndex];\n        this.selectedOptionName = this.selectedOption.name;\n\n        setTimeout(this.focusInput, 500);\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option' });\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию' });\n\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('OPTIONS_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('SELECT');\n        } else {\n            this.title = this.title || 'Choose Option';\n            this.ok = this.ok || 'Select';\n        }\n              \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsDialogData) {\n        event.stopPropagation();\n        this.selectedOptionName = option.name;\n    }\n            \n    public onKeyPress (event: JQueryKeyEventObject) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.onSelect();\n        }\n    }\n\n    public onSelect() {\n        let option: OptionsDialogData;\n        option = _.find(this.options, { name: this.selectedOptionName });\n\n        this.$mdDialog.hide({ option: option, isCheckboxOption: this.isCheckboxOption });\n    }\n\n    private focusInput() {\n        let list;\n        list = $('.pip-options-dialog .pip-list');\n        list.focus();\n    }\n\n}\n\nangular\n    .module('pipOptionsDialog')\n    .controller('pipOptionsDialogController', OptionsDialogController);","\nexport class OptionsDialogData {\n    public icon: string = 'star';\n    public name: string;\n    public title: string;\n    public active: boolean = true; \n}\n","import { OptionsDialogData } from './OptionsDialogData';\n\nexport class OptionsDialogParams {\n    // Mouse event\n    public event?: MouseEvent;\n    // Dialog title \n    public title?: string;\n    // confirm button title\n    public ok?: string;\n    // Dialog options array\n    public options?: OptionsDialogData[];\n    // Selected option by default\n    public selectedOption?: OptionsDialogData;\n    // Selected Option Name\n    public selectedOptionName?: string;\n    // Value for checkbox option\n    public isCheckboxOption?: boolean;\n    // Checkbox caption, Checkbox visible if caption is set\n    public checkboxOptionCaption?: string;\n}\n","import { OptionsDialogData } from './OptionsDialogData';\n\nexport class OptionsDialogResult {\n    public option: OptionsDialogData;\n    public isCheckboxOption: boolean;\n}\n","import { OptionsDialogParams } from './OptionsDialogParams';\nimport { OptionsDialogResult } from './OptionsDialogResult';\nimport { IOptionsDialogService } from './IOptionsDialogService';\n\nclass OptionsDialogService implements IOptionsDialogService {\n    public _mdDialog: angular.material.IDialogService;\n    public constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    public  show(params: OptionsDialogParams, \n        successCallback?: (result: OptionsDialogResult) => void, \n        cancelCallback?: () => void): any {\n        \n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'options/OptionsDialog.html',\n            controller: 'pipOptionsDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,\n            clickOutsideToClose: true\n         })\n        .then((result: OptionsDialogResult) => {\n            if (successCallback) {\n                successCallback(result);\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n                \n    }\n    \n}\n\nangular\n    .module('pipOptionsDialog')\n    .service('pipOptionsDialog', OptionsDialogService);","angular\n    .module('pipOptionsDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './OptionsDialogData';\nimport './OptionsDialogParams';\nimport './OptionsDialogResult';\nimport './OptionsDialogController';\nimport './OptionsDialogService';\n\n\nexport * from './OptionsDialogData';\nexport * from './OptionsDialogParams';\nexport * from './OptionsDialogResult';\nexport * from './OptionsDialogService';\n","import { OptionsBigDialogParams } from './OptionsBigDialogParams';\nimport { OptionsBigDialogData } from './OptionsBigDialogData';\n\nclass OptionsBigDialogController extends OptionsBigDialogParams {\n    private _injector: ng.auto.IInjectorService;\n    private $mdDialog: angular.material.IDialogService;\n\n    public theme: string;\n    public optionIndex: number;\n\n    constructor(\n        $mdDialog: angular.material.IDialogService,\n        $injector: ng.auto.IInjectorService, \n        $rootScope: ng.IRootScopeService) \n    {\n        \"ngInject\";\n\n        super();\n        this.$mdDialog = $mdDialog;\n        this._injector = $injector;\n        this.theme = $rootScope['$theme'];\n\n        this.initTranslate()\n\n        this.selectedOption = _.find(this.options, {active: true}) || null;\n        let name: string = this.selectedOption ? this.selectedOption.name : this.selectedOptionName;\n        let index: number = _.findIndex(this.options, (opt: OptionsBigDialogData) => {\n            return opt.name == name;\n        });\n        this.optionIndex = index == -1 ? 0 : index;\n        this.selectedOption = this.options[this.optionIndex];\n        this.selectedOptionName = this.selectedOption.name;\n\n        setTimeout(this.focusInput, 500);\n    }\n\n    private initTranslate(): void {\n        let pipTranslate: pip.services.ITranslateService;\n        pipTranslate = this._injector.has('pipTranslate') \n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option' });\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию' });\n\n            this.title =  pipTranslate.translate(this.title) || pipTranslate.translate('OPTIONS_TITLE');\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('SELECT');\n        } else {\n            this.title = this.title || 'Choose Option';\n            this.ok = this.ok || 'Select';\n        }        \n    }\n\n    public onOk(): void {\n        this.$mdDialog.hide();\n    }\n\n    public onCancel(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsBigDialogData) {\n        event.stopPropagation();\n        this.selectedOptionName = option.name;\n\n        if (this.noActions) {\n            this.onSelect();\n        }\n    }\n\n    public onSelected() {\n        this.selectedOptionName = this.options[this.optionIndex].name;\n\n        if (this.noActions) {\n               this.onSelect();\n        }\n    }\n\n    public onKeyUp(event: JQueryKeyEventObject, index: number) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            event.stopPropagation();\n            event.preventDefault();\n            if (index !== undefined && index > -1 && index < this.options.length) {\n                this.selectedOptionName = this.options[index].name;\n                this.onSelect();\n            }\n        }\n    }\n    \n    public onSelect = function () {\n        let option: OptionsBigDialogData;\n        option = <OptionsBigDialogData>_.find(this.options, { name: this.selectedOptionName }) || new OptionsBigDialogData();\n        this.$mdDialog.hide({ option: option });\n    };\n\n    private focusInput() {\n        let list;\n        list = $('.pip-options-dialog .pip-list');\n        list.focus();\n    }\n\n}\n\nangular\n    .module('pipOptionsBigDialog')\n    .controller('pipOptionsBigDialogController', OptionsBigDialogController);\n","export class OptionsBigDialogData {\n    public name: string;\n    public title: string;\n    public subtitle: string;\n}\n","import { OptionsBigDialogData } from './OptionsBigDialogData';\n\nexport class OptionsBigDialogParams {\n    // Mouse event\n    public event?: MouseEvent;   \n    // Dialog title \n    public title?: string;  \n    // confirm button title\n    public ok?: string;\n    // Dialog options array\n    public options?: OptionsBigDialogData[];\n    // Selected option by default\n    public selectedOption?: OptionsBigDialogData;\n    // Selected Option Name\n    public selectedOptionName?: string;    \n    // Dialog hint title\n    public hint?: string;\n    // Show title\n    public noTitle;\n    // Show action button\n    public noActions;\n}\n\n","import { OptionsBigDialogData } from './OptionsBigDialogData';\n\nexport class OptionsBigDialogResult {\n    public option: OptionsBigDialogData;\n    public isCheckboxOption: boolean;\n}\n","import { OptionsBigDialogParams } from './OptionsBigDialogParams';\nimport { OptionsBigDialogResult } from './OptionsBigDialogResult';\nimport { IOptionsBigDialogService } from './IOptionsBigDialogService';\n\nclass OptionsBigDialogService implements IOptionsBigDialogService {\n    public _mdDialog: angular.material.IDialogService;\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n    public show(params, successCallback?: (result: OptionsBigDialogResult) => void, cancelCallback?: () => void): any {\n         this._mdDialog.show({\n            targetEvent: params.event,\n            templateUrl: 'options_big/OptionsBigDialog.html',\n            controller: 'pipOptionsBigDialogController',\n            controllerAs: '$ctrl',\n            locals: params,\n            bindToController: true,        \n            clickOutsideToClose: true\n         })\n        .then((result: OptionsBigDialogResult) => {\n            if (successCallback) {\n                successCallback(result);\n            }\n        }, \n        () => {\n            if (cancelCallback) {\n                cancelCallback();\n            }\n        });\n    }\n    \n}\n\nangular\n    .module('pipOptionsBigDialog')\n    .service('pipOptionsBigDialog', OptionsBigDialogService);","angular\n    .module('pipOptionsBigDialog', [\n        'ngMaterial', \n        'pipDialogs.Translate',\n        'pipDialogs.Templates']);\n\nimport './OptionsBigDialogParams';\nimport './OptionsBigDialogData';\nimport './OptionsBigDialogResult';\nimport './OptionsBigDialogController';\nimport './OptionsBigDialogService';\n\n\nexport * from './OptionsBigDialogParams';\nexport * from './OptionsBigDialogData';\nexport * from './OptionsBigDialogResult';\nexport * from './IOptionsBigDialogService';\n","(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('confirmation/ConfirmationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-confirmation-dialog layout-column\" width=\"400\" md-theme=\"{{ ::$ctrl.theme }}\"><div class=\"pip-header\"><h3>{{ :: $ctrl.title }}</h3></div><div class=\"pip-footer\"><div><md-button ng-click=\"$ctrl.onCancel()\">{{ :: $ctrl.cancel }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onOk()\">{{ :: $ctrl.ok }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('error_details/ErrorDetailsDialog.html',\n    '<md-dialog class=\"pip-dialog pip-error-details-dialog layout-column\" width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><div class=\"pip-body\"><div class=\"pip-header\"><h3>{{ ::$ctrl.strings.errorDetails | translate }}</h3></div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"$ctrl.error.code || ($ctrl.error.data && $ctrl.error.data.code)\">{{ ::$ctrl.strings.errorCode | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.code || ($ctrl.error.data && $ctrl.error.data.code)\">{{ $ctrl.error.code || $ctrl.error.data.code }}</div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"$ctrl.error.path || ($ctrl.error.data && $ctrl.error.data.path)\">{{ ::$ctrl.strings.errorPath | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.path || ($ctrl.error.data && $ctrl.error.data.path)\">{{ $ctrl.error.path || $ctrl.error.data.path }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.isString($ctrl.error) || $ctrl.error.error || ($ctrl.error.data && $ctrl.error.data.error)\">{{ ::$ctrl.strings.errorText | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.error || ($ctrl.error.data && $ctrl.error.data.error)\">{{ $ctrl.getErrorText() }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.error.method || ($ctrl.error.data && $ctrl.error.data.method)\">{{ ::$ctrl.strings.errorMethod | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.method || ($ctrl.error.data && $ctrl.error.data.method)\">{{ $ctrl.error.method || $ctrl.error.data.method }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.error.message || ($ctrl.error.data && $ctrl.error.data.message)\">{{ ::$ctrl.strings.errorMessage | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.message || ($ctrl.error.data && $ctrl.error.data.message)\">{{ $ctrl.error.message || $ctrl.error.data.message }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent m0\" ng-click=\"$ctrl.onOk()\">{{ ::$ctrl.dismissButton | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options/OptionsDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog layout-column\" min-width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body lp0 tp0 rp0 bp24 pip-scroll\"><div class=\"pip-header\"><h3>{{ ::$ctrl.title | translate }}</h3><div ng-show=\"$ctrl.checkboxOptionCaption\" class=\"header-option text-subhead1 divider-bottom\"><md-checkbox ng-model=\"$ctrl.isCheckboxOption\" aria-label=\"CHECKBOX\">{{ ::$ctrl.checkboxOptionCaption | translate }}</md-checkbox></div></div><div class=\"pip-content\"><md-radio-group ng-model=\"$ctrl.selectedOptionName\" class=\"pip-list md-primary\" md-no-ink=\"true\" ng-keypress=\"$ctrl.onKeyPress($event)\" tabindex=\"0\"><div ng-repeat=\"option in $ctrl.options\" class=\"pip-list-item\" md-ink-ripple=\"\" ui-event=\"{ click: \\'$ctrl.onOptionSelect($event, option)\\' }\" ng-class=\"{ selected: option.name == $ctrl.selectedOptionName }\"><div class=\"pip-list-item item-padding\"><md-icon class=\"pip-option-icon\" md-svg-icon=\"icons:{{ option.icon }}\" ng-if=\"option.icon\"></md-icon><div class=\"pip-option-title\">{{ ::option.title | translate }}</div><md-radio-button ng-value=\"option.name\" tabindex=\"-1\" aria-label=\"{{ ::option.title | translate }}\"></md-radio-button></div></div></md-radio-group></div></md-dialog-content><div class=\"pip-footer\"><div><md-button class=\"pip-cancel\" ng-click=\"$ctrl.onCancel()\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"$ctrl.onSelect()\">{{ ::$ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('information/InformationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-information-dialog layout-column\" width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><div class=\"pip-header\"><h3>{{:: $ctrl.title | translate }}</h3></div><div class=\"pip-body\"><div class=\"pip-content\">{{ $ctrl.content }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onOk()\">{{ $ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options_big/OptionsBigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog-big layout-column\" min-width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body pip-scroll\" ng-class=\"{\\'bp24\\': !$ctrl.noActions}\"><div class=\"pip-header\" ng-class=\"{\\'header-hint\\': $ctrl.noTitle && $ctrl.hint}\"><h3 class=\"m0\" ng-if=\"!$ctrl.noTitle\">{{ ::$ctrl.title | translate }}</h3><div ng-show=\"$ctrl.noTitle && $ctrl.hint\" class=\"dialog-hint layout-row layout-align-start-center\"><div class=\"hint-icon-container flex-fixed\"><md-icon md-svg-icon=\"icons:info-circle-outline\"></md-icon></div><div>{{ ::$ctrl.hint | translate }}</div></div></div><div class=\"content-divider\" ng-if=\"!noTitle\"></div><div class=\"pip-content\"><div class=\"spacer8\" ng-if=\"noTitle && hint\"></div><md-list class=\"pip-menu pip-ref-list\" pip-selected=\"$ctrl.optionIndex\" index=\"{{ $ctrl.optionIndex }}\" pip-select=\"$ctrl.onSelected($event)\"><md-list-item class=\"pip-ref-list-item pip-selectable layout-row layout-align-start-center\" ng-class=\"{\\'selected md-focused\\' : option.name == $ctrl.selectedOptionName, \\'divider-bottom\\': $index != options.length - 1}\" md-ink-ripple=\"\" ng-keyup=\"$ctrl.onKeyUp($event, $index)\" ng-repeat=\"option in $ctrl.options\"><div class=\"pip-content content-stretch\" ng-click=\"$ctrl.onOptionSelect($event, option)\"><p class=\"pip-title spacer-right\" ng-if=\"option.title\" style=\"margin-bottom: 4px !important;\">{{ ::option.title | translate }}</p><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.subtitle\">{{ ::option.subtitle | translate }}</div><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.text\" ng-bind-html=\"option.text | translate\"></div></div></md-list-item></md-list></div><div class=\"spacer8\" ng-if=\"$ctrl.noActions\"></div></md-dialog-content><div class=\"pip-footer\" ng-if=\"!$ctrl.noActions\"><div><md-button class=\"pip-cancel\" ng-click=\"$ctrl.onCancel()\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"$ctrl.onSelect()\" style=\"margin-right: -6px\">{{ ::$ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dialogs-html.min.js.map\n"]}