{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/confirmation/ConfirmationDialogController.ts","src/confirmation/ConfirmationDialogParams.ts","src/confirmation/ConfirmationDialogService.ts","src/confirmation/index.ts","src/dependencies/TranslateFilter.ts","src/error_details/ErrorDetailsDialogController.ts","src/error_details/ErrorDetailsDialogParams.ts","src/error_details/ErrorDetailsDialogService.ts","src/error_details/index.ts","src/index.ts","src/information/InformationDialogController.ts","src/information/InformationDialogParams.ts","src/information/InformationDialogService.ts","src/information/index.ts","src/options/OptionsDialogController.ts","src/options/OptionsDialogData.ts","src/options/OptionsDialogParams.ts","src/options/OptionsDialogResult.ts","src/options/OptionsDialogService.ts","src/options/index.ts","src/options_big/OptionsBigDialogController.ts","src/options_big/OptionsBigDialogData.ts","src/options_big/OptionsBigDialogParams.ts","src/options_big/OptionsBigDialogResult.ts","src/options_big/OptionsBigDialogService.ts","src/options_big/index.ts","temp/pip-webui-dialogs-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dialogs","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ConfirmationDialogParams_1","ConfirmationDialogController","_super","$mdDialog","$injector","$rootScope","_this","_injector","initTranslate","__extends","$inject","prototype","pipTranslate","has","get","translations","CONFIRM_TITLE","title","translate","ok","cancel","onOk","hide","onCancel","ConfirmationDialogParams","Object","defineProperty","value","ConfirmationDialogService","_mdDialog","show","params","successCallback","cancelCallback","targetEvent","event","templateUrl","controller","controllerAs","locals","bindToController","./ConfirmationDialogParams","./ConfirmationDialogService","./IConfirmationDialogService","6","key","angular","ErrorDialogStrings","errorDetails","errorMessage","errorCode","errorMethod","errorPath","errorText","ErrorDetailsDialogController","strings","theme","$theme","error","OK","CANCEL","ERROR_DETAILS","CODE","PATH","ERROR","METHOD","MESSAGE","DISMISS","dismissButton","isString","_","getErrorText","toString","data","8","ErrorDetailsDialogParams","9","ErrorDetailsDialogService","clickOutsideToClose","then","__export","m","p","hasOwnProperty","__","constructor","d","b","create","InformationDialogController","item","content","message","INFORMATION_TITLE","pipFormat","sprintf","13","InformationDialogParams","14","InformationDialogService","service","15","extendStatics","OptionsDialogController","options","selectedOption","find","active","index","findIndex","opt","name","optionIndex","selectedOptionName","focusInput","OPTIONS_TITLE","onOptionSelect","option","stopPropagation","onKeyPress","keyCode","preventDefault","onSelect","isCheckboxOption","list","OptionsDialogParams","17","OptionsDialogData","18","19","OptionsDialogResult","OptionsDialogService","result","21","__proto__","Array","OptionsBigDialogController","OptionsBigDialogData_1","OptionsBigDialogData","noActions","onSelected","onKeyUp","undefined","focus","OptionsBigDialogParams","OptionsBigDialogResult","OptionsBigDialogService","27","./OptionsBigDialogController","./OptionsBigDialogData","./OptionsBigDialogParams","./OptionsBigDialogResult","./OptionsBigDialogService","28","run","$templateCache","put"],"mappings":"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","file":"pip-webui-dialogs.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { ConfirmationDialogParams } from './ConfirmationDialogParams';\r\n\r\nclass ConfirmationDialogController extends  ConfirmationDialogParams {\r\n    private _injector: ng.auto.IInjectorService;\r\n\r\n    public $mdDialog: angular.material.IDialogService;\r\n    public theme: string;\r\n\r\n    constructor(\r\n        $mdDialog: angular.material.IDialogService,\r\n        $injector: ng.auto.IInjectorService,\r\n        $rootScope: ng.IRootScopeService) \r\n    {\r\n        \"ngInject\";\r\n\r\n        super();\r\n        this._injector = $injector;\r\n\r\n        this.initTranslate();\r\n\r\n        this.$mdDialog = $mdDialog;\r\n        this.theme = $rootScope['$theme'];\r\n    }\r\n\r\n    private initTranslate(): void {\r\n        let pipTranslate: pip.services.ITranslateService;\r\n        pipTranslate = this._injector.has('pipTranslate') \r\n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\r\n\r\n        if (pipTranslate) {\r\n            pipTranslate.translations('en', { 'CONFIRM_TITLE': 'Confirm' });\r\n            pipTranslate.translations('ru', { 'CONFIRM_TITLE': 'Подтвердите'});\r\n\r\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('CONFIRM_TITLE');\r\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('OK');\r\n            this.cancel = pipTranslate.translate(this.cancel) || ('CANCEL');\r\n        } else {\r\n            this.title = this.title || 'Confirm';\r\n            this.ok = this.ok || 'OK';\r\n            this.cancel = this.cancel || 'Cancel';\r\n        }\r\n    }\r\n\r\n    public onOk(): void {\r\n        this.$mdDialog.hide();\r\n    }\r\n\r\n    public onCancel(): void {\r\n        this.$mdDialog.cancel();\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipConfirmationDialog')\r\n    .controller('pipConfirmationDialogController', ConfirmationDialogController);","export class ConfirmationDialogParams {\r\n    // Mouse event\r\n    public event?: MouseEvent;\r\n    // Confirm button caption\r\n    public ok?: string;\r\n    // Dialog title\r\n    public title?: string; \r\n    // Cancel button caption\r\n    public cancel?: string;\r\n}\r\n","import { ConfirmationDialogParams } from './ConfirmationDialogParams';\r\nimport { IConfirmationDialogService } from './IConfirmationDialogService';\r\n\r\nclass ConfirmationDialogService implements IConfirmationDialogService {\r\n    private _mdDialog: angular.material.IDialogService;\r\n    \r\n    constructor($mdDialog: angular.material.IDialogService) {\r\n        this._mdDialog = $mdDialog;\r\n    }\r\n\r\n    public show(params: ConfirmationDialogParams, successCallback?: () => void, cancelCallback?: () => void) {\r\n        this._mdDialog.show({\r\n            targetEvent: params.event,\r\n            templateUrl: 'confirmation/ConfirmationDialog.html',\r\n            controller: 'pipConfirmationDialogController',\r\n            controllerAs: '$ctrl',\r\n            locals: params,\r\n            bindToController: true,\r\n            clickOutsideToClose: true\r\n        })\r\n        .then(() => {\r\n            if (successCallback) {\r\n                successCallback();\r\n            }\r\n        }, \r\n        () => {\r\n            if (cancelCallback) {\r\n                cancelCallback();\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipConfirmationDialog')\r\n    .service('pipConfirmationDialog', ConfirmationDialogService);","angular\r\n    .module('pipConfirmationDialog', [\r\n        'ngMaterial', \r\n        'pipDialogs.Translate',\r\n        'pipDialogs.Templates']);\r\n\r\nimport './ConfirmationDialogParams';\r\nimport './ConfirmationDialogController';\r\nimport './IConfirmationDialogService';\r\nimport './ConfirmationDialogService';\r\n\r\nexport * from './IConfirmationDialogService';\r\n","{\r\n\r\nfunction translate($injector: ng.auto.IInjectorService) {\r\n    var pipTranslate: pip.services.ITranslateService = $injector.has('pipTranslate') \r\n        ? <pip.services.ITranslateService>$injector.get('pipTranslate') : null;\r\n\r\n    return function (key: string) {\r\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipDialogs.Translate', [])\r\n    .filter('translate', translate);\r\n\r\n}","import { ErrorDetailsDialogParams } from './ErrorDetailsDialogParams';\r\n\r\nclass ErrorDialogStrings {\r\n    public errorDetails: string = 'Error details';\r\n    public errorMessage: string = 'Message';\r\n    public errorCode: string = 'Code';\r\n    public errorMethod: string = 'Method';\r\n    public errorPath: string = 'Path';\r\n    public errorText: string = 'Error';   \r\n}\r\n\r\nclass ErrorDetailsDialogController extends ErrorDetailsDialogParams {\r\n    private _injector: ng.auto.IInjectorService;\r\n\r\n    public $mdDialog: ng.material.IDialogService;\r\n    public theme: string;\r\n    public strings: ErrorDialogStrings;\r\n\r\n    constructor(\r\n        $mdDialog: ng.material.IDialogService,\r\n        $injector: ng.auto.IInjectorService,\r\n        $rootScope: ng.IRootScopeService) \r\n    {\r\n        \"ngInject\";\r\n        \r\n        super();\r\n\r\n        this.strings = new ErrorDialogStrings();\r\n        this._injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.theme = $rootScope.$theme;\r\n\r\n        this.initTranslate();\r\n\r\n        if (!this.error) {\r\n            this.error = '<none>';             \r\n        }\r\n    }\r\n\r\n    private initTranslate(): void {\r\n        let pipTranslate: pip.services.ITranslateService;\r\n        pipTranslate = this._injector.has('pipTranslate') \r\n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\r\n\r\n        if (pipTranslate) {\r\n            pipTranslate.translations('en', {\r\n                'OK': 'Ok',\r\n                'CANCEL': 'Cancel',\r\n                'ERROR_DETAILS': 'Error details',\r\n                'CODE': 'Error code',\r\n                'PATH': 'Path',\r\n                'ERROR': 'Error',\r\n                'METHOD': 'Method',\r\n                'MESSAGE': 'Message',\r\n                'DISMISS': 'Dismiss'\r\n            });\r\n            pipTranslate.translations('ru', {\r\n                'OK': 'Ок',\r\n                'CANCEL': 'Отмена',\r\n                'ERROR_DETAILS': 'Детали ошибки',\r\n                'CODE': 'Код ошибки',\r\n                'PATH': 'Путь',\r\n                'ERROR': 'Ошибка',\r\n                'METHOD': 'Метод',\r\n                'MESSAGE': 'Сообщение'\r\n            });\r\n            this.dismissButton = pipTranslate.translate(this.dismissButton) || pipTranslate.translate('DISMISS');\r\n\r\n            this.strings.errorDetails = pipTranslate.translate('ERROR_DETAILS');\r\n            this.strings.errorMessage = pipTranslate.translate('MESSAGE');\r\n            this.strings.errorCode = pipTranslate.translate('CODE');\r\n            this.strings.errorMethod = pipTranslate.translate('METHOD');\r\n            this.strings.errorPath = pipTranslate.translate('PATH');\r\n            this.strings.errorText = pipTranslate.translate('ERROR');\r\n        } else {\r\n            this.dismissButton = this.dismissButton || 'Dismiss';\r\n        }\r\n    }\r\n    \r\n    public onOk(): void {\r\n        this.$mdDialog.hide();\r\n    }\r\n\r\n    public isString(error): boolean {\r\n        return _.isString(error);\r\n    }\r\n\r\n    public getErrorText(): string {\r\n        let error: string;\r\n\r\n        if (_.isString(this.error)) { \r\n            return this.error\r\n        } \r\n        if (this.error && this.error.error) {\r\n            return this.error.error.toString();\r\n        }\r\n        if (this.error && this.error.data && this.error.data.error) {\r\n            return this.error.data.error.toString();\r\n        }\r\n        \r\n        return '<none>';\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipErrorDetailsDialog')\r\n    .controller('pipErrorDetailsDialogController', ErrorDetailsDialogController);","export class ErrorDetailsDialogParams {\r\n    // Mouse event\r\n    public event?: MouseEvent;\r\n    // Close button label\r\n    public dismissButton?: string;\r\n    // Error object or string\r\n    public error: any;\r\n}","import { ErrorDetailsDialogParams } from './ErrorDetailsDialogParams';\r\nimport { IErrorDetailsDialogService } from './IErrorDetailsDialogService';\r\n\r\nclass ErrorDetailsDialogService implements IErrorDetailsDialogService {\r\n    public _mdDialog: angular.material.IDialogService;\r\n\r\n    public constructor($mdDialog: angular.material.IDialogService) {\r\n        this._mdDialog = $mdDialog;\r\n    }\r\n    \r\n    public show(params: ErrorDetailsDialogParams, \r\n        successCallback?: () => void, cancelCallback?: () => void) {\r\n         this._mdDialog.show({\r\n            targetEvent: params.event,\r\n            templateUrl: 'error_details/ErrorDetailsDialog.html',\r\n            controller: 'pipErrorDetailsDialogController',\r\n            controllerAs: '$ctrl',\r\n            locals: params, \r\n            bindToController: true,\r\n            clickOutsideToClose: true\r\n         })\r\n        .then(() => {\r\n            if (successCallback) {\r\n                successCallback();\r\n            }\r\n        }, \r\n        () => {\r\n            if (cancelCallback) {\r\n                cancelCallback();\r\n            }\r\n        });\r\n                \r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipErrorDetailsDialog')\r\n    .service('pipErrorDetailsDialog', ErrorDetailsDialogService);","angular\r\n    .module('pipErrorDetailsDialog', [\r\n        'ngMaterial', \r\n        'pipDialogs.Translate',\r\n        'pipDialogs.Templates']);\r\n\r\nimport './ErrorDetailsDialogParams';\r\nimport './ErrorDetailsDialogService';\r\nimport './ErrorDetailsDialogController';\r\n\r\nexport * from './ErrorDetailsDialogParams';\r\nexport * from './IErrorDetailsDialogService';","﻿import './dependencies/TranslateFilter';\r\nimport './error_details';\r\nimport './information';\r\nimport './options';\r\nimport './options_big';\r\nimport './confirmation';\r\n\r\nangular\r\n    .module('pipDialogs', [\r\n        'pipInformationDialog',\r\n        'pipConfirmationDialog',\r\n        'pipOptionsDialog',\r\n        'pipOptionsBigDialog',\r\n        'pipErrorDetailsDialog'\r\n    ]);\r\n\r\nexport * from './error_details';\r\nexport * from './information';\r\nexport * from './confirmation';\r\nexport * from './options';\r\nexport * from './options_big';\r\n","import { InformationDialogParams } from './InformationDialogParams';\r\n\r\nclass InformationDialogController extends InformationDialogParams {\r\n    private _injector: ng.auto.IInjectorService;\r\n\r\n    public $mdDialog: angular.material.IDialogService;\r\n    public theme: string;\r\n    public content: string;\r\n\r\n    constructor(\r\n        $mdDialog: angular.material.IDialogService,\r\n        $injector: ng.auto.IInjectorService,\r\n        $rootScope: ng.IRootScopeService) \r\n    {\r\n        \"ngInject\";\r\n\r\n        super();        \r\n        this._injector = $injector;\r\n\r\n        this.initTranslate()\r\n\r\n        this.$mdDialog = $mdDialog;\r\n        this.theme = $rootScope['$theme'];\r\n    }\r\n\r\n    private initTranslate(): void {\r\n        let pipTranslate: pip.services.ITranslateService;\r\n        pipTranslate = this._injector.has('pipTranslate') \r\n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\r\n\r\n        let content: string = this.message;\r\n        let item: string;\r\n        if (pipTranslate) {\r\n            pipTranslate.translations('en', { 'INFORMATION_TITLE': 'Information'});\r\n            pipTranslate.translations('ru', { 'INFORMATION_TITLE': 'Информация' });\r\n\r\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('INFORMATION_TITLE');\r\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('OK');\r\n            content = pipTranslate.translate(content);\r\n        } else {\r\n            this.title = this.title || 'Information';\r\n            this.ok = this.ok || 'OK';\r\n        }\r\n\r\n        let pipFormat: pip.services.IFormat = this._injector.has('pipFormat') \r\n            ? <pip.services.IFormat>this._injector.get('pipFormat') : null;\r\n\r\n        if (this.item && pipFormat) {\r\n            // item = _.truncate(params.item, 25);\r\n            content = pipFormat.sprintf(content, item);\r\n        }\r\n\r\n        this.content = content;        \r\n    }\r\n\r\n    public onOk(): void {\r\n        this.$mdDialog.hide();\r\n    }\r\n\r\n    public onCancel(): void {\r\n        this.$mdDialog.cancel();\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipInformationDialog')\r\n    .controller('pipInformationDialogController', InformationDialogController);","export class InformationDialogParams {\r\n    // Mouse event\r\n    public event?: MouseEvent;\r\n    // Confirm button caption\r\n    public ok?: string;\r\n    // Dialog title\r\n    public title?: string; \r\n    // Dialog messag. You can use formatting options (%s, %d etc.). \r\n    public message: string;\r\n    // Paramentrs for message string\r\n    public item?: any;\r\n}","import { InformationDialogParams } from './InformationDialogParams';\r\nimport { IInformationDialogService } from './IInformationDialogService';\r\n\r\nclass InformationDialogService implements IInformationDialogService {\r\n    private _mdDialog: angular.material.IDialogService;\r\n    \r\n    constructor($mdDialog: angular.material.IDialogService) {\r\n        this._mdDialog = $mdDialog;\r\n    }\r\n\r\n    public show(params, successCallback?: () => void, cancelCallback?: () => void) {\r\n         this._mdDialog.show({\r\n            targetEvent: params.event,\r\n            templateUrl: 'information/InformationDialog.html',\r\n            controller: 'pipInformationDialogController',\r\n            controllerAs: '$ctrl',\r\n            locals: params,\r\n            bindToController: true,\r\n            clickOutsideToClose: true\r\n         })\r\n        .then(function () {\r\n            if (successCallback) {\r\n                successCallback();\r\n            }\r\n        });\r\n                \r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipInformationDialog')\r\n    .service('pipInformationDialog', InformationDialogService);","angular\r\n    .module('pipInformationDialog', [\r\n        'ngMaterial',\r\n        'pipDialogs.Translate', \r\n        'pipDialogs.Templates']);\r\n\r\nimport './InformationDialogParams';\r\nimport './InformationDialogController';\r\nimport './InformationDialogService';\r\n\r\n\r\nexport * from './IInformationDialogService';\r\nexport * from './InformationDialogParams';\r\n","import { OptionsDialogData } from './OptionsDialogData';\r\nimport { OptionsDialogParams } from './OptionsDialogParams';\r\nimport { OptionsDialogResult } from './OptionsDialogResult';\r\n\r\nclass OptionsDialogController extends OptionsDialogParams {\r\n    private _injector: ng.auto.IInjectorService;\r\n    public $mdDialog: angular.material.IDialogService;\r\n    public theme: string;\r\n    public optionIndex: number;\r\n\r\n    constructor(\r\n        $mdDialog: angular.material.IDialogService,\r\n        $injector: ng.auto.IInjectorService, \r\n        $rootScope: ng.IRootScopeService) \r\n    {\r\n        \"ngInject\";\r\n\r\n        super();\r\n        this.$mdDialog = $mdDialog;\r\n        this._injector = $injector;\r\n        this.theme = $rootScope['$theme'];\r\n        this.options = this.options || [];\r\n\r\n        this.initTranslate();\r\n        \r\n        this.selectedOption = _.find(this.options, {active: true}) || null;\r\n        let name: string = this.selectedOption ? this.selectedOption.name : this.selectedOptionName;\r\n        let index: number = _.findIndex(this.options, (opt: OptionsDialogData) => {\r\n            return opt.name == name;\r\n        });\r\n        this.optionIndex = index == -1 ? 0 : index;\r\n        this.selectedOption = this.options[this.optionIndex];\r\n        this.selectedOptionName = this.selectedOption.name;\r\n\r\n        setTimeout(this.focusInput, 500);\r\n    }\r\n\r\n    private initTranslate(): void {\r\n        let pipTranslate: pip.services.ITranslateService;\r\n        pipTranslate = this._injector.has('pipTranslate') ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\r\n\r\n        if (pipTranslate) {\r\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option' });\r\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию' });\r\n\r\n            this.title = pipTranslate.translate(this.title) || pipTranslate.translate('OPTIONS_TITLE');\r\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('SELECT');\r\n        } else {\r\n            this.title = this.title || 'Choose Option';\r\n            this.ok = this.ok || 'Select';\r\n        }\r\n              \r\n    }\r\n\r\n    public onOk(): void {\r\n        this.$mdDialog.hide();\r\n    }\r\n\r\n    public onCancel(): void {\r\n        this.$mdDialog.cancel();\r\n    }\r\n\r\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsDialogData) {\r\n        event.stopPropagation();\r\n        this.selectedOptionName = option.name;\r\n    }\r\n            \r\n    public onKeyPress (event: JQueryKeyEventObject) {\r\n        if (event.keyCode === 32 || event.keyCode === 13) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n            this.onSelect();\r\n        }\r\n    }\r\n\r\n    public onSelect() {\r\n        let option: OptionsDialogData;\r\n        option = _.find(this.options, { name: this.selectedOptionName });\r\n\r\n        this.$mdDialog.hide({ option: option, isCheckboxOption: this.isCheckboxOption });\r\n    }\r\n\r\n    private focusInput() {\r\n        let list;\r\n        list = $('.pip-options-dialog .pip-list');\r\n        list.focus();\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipOptionsDialog')\r\n    .controller('pipOptionsDialogController', OptionsDialogController);","\r\nexport class OptionsDialogData {\r\n    public icon: string = 'star';\r\n    public name: string;\r\n    public title: string;\r\n    public active: boolean = true; \r\n}\r\n","import { OptionsDialogData } from './OptionsDialogData';\r\n\r\nexport class OptionsDialogParams {\r\n    // Mouse event\r\n    public event?: MouseEvent;\r\n    // Dialog title \r\n    public title?: string;\r\n    // confirm button title\r\n    public ok?: string;\r\n    // Dialog options array\r\n    public options?: OptionsDialogData[];\r\n    // Selected option by default\r\n    public selectedOption?: OptionsDialogData;\r\n    // Selected Option Name\r\n    public selectedOptionName?: string;\r\n    // Value for checkbox option\r\n    public isCheckboxOption?: boolean;\r\n    // Checkbox caption, Checkbox visible if caption is set\r\n    public checkboxOptionCaption?: string;\r\n}\r\n","import { OptionsDialogData } from './OptionsDialogData';\r\n\r\nexport class OptionsDialogResult {\r\n    public option: OptionsDialogData;\r\n    public isCheckboxOption: boolean;\r\n}\r\n","import { OptionsDialogParams } from './OptionsDialogParams';\r\nimport { OptionsDialogResult } from './OptionsDialogResult';\r\nimport { IOptionsDialogService } from './IOptionsDialogService';\r\n\r\nclass OptionsDialogService implements IOptionsDialogService {\r\n    public _mdDialog: angular.material.IDialogService;\r\n    public constructor($mdDialog: angular.material.IDialogService) {\r\n        this._mdDialog = $mdDialog;\r\n    }\r\n    public  show(params: OptionsDialogParams, \r\n        successCallback?: (result: OptionsDialogResult) => void, \r\n        cancelCallback?: () => void): any {\r\n        \r\n         this._mdDialog.show({\r\n            targetEvent: params.event,\r\n            templateUrl: 'options/OptionsDialog.html',\r\n            controller: 'pipOptionsDialogController',\r\n            controllerAs: '$ctrl',\r\n            locals: params,\r\n            bindToController: true,\r\n            clickOutsideToClose: true\r\n         })\r\n        .then((result: OptionsDialogResult) => {\r\n            if (successCallback) {\r\n                successCallback(result);\r\n            }\r\n        }, \r\n        () => {\r\n            if (cancelCallback) {\r\n                cancelCallback();\r\n            }\r\n        });\r\n                \r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipOptionsDialog')\r\n    .service('pipOptionsDialog', OptionsDialogService);","angular\r\n    .module('pipOptionsDialog', [\r\n        'ngMaterial', \r\n        'pipDialogs.Translate',\r\n        'pipDialogs.Templates']);\r\n\r\nimport './OptionsDialogData';\r\nimport './OptionsDialogParams';\r\nimport './OptionsDialogResult';\r\nimport './OptionsDialogController';\r\nimport './OptionsDialogService';\r\n\r\n\r\nexport * from './OptionsDialogData';\r\nexport * from './OptionsDialogParams';\r\nexport * from './OptionsDialogResult';\r\nexport * from './OptionsDialogService';\r\n","import { OptionsBigDialogParams } from './OptionsBigDialogParams';\r\nimport { OptionsBigDialogData } from './OptionsBigDialogData';\r\n\r\nclass OptionsBigDialogController extends OptionsBigDialogParams {\r\n    private _injector: ng.auto.IInjectorService;\r\n    private $mdDialog: angular.material.IDialogService;\r\n\r\n    public theme: string;\r\n    public optionIndex: number;\r\n\r\n    constructor(\r\n        $mdDialog: angular.material.IDialogService,\r\n        $injector: ng.auto.IInjectorService, \r\n        $rootScope: ng.IRootScopeService) \r\n    {\r\n        \"ngInject\";\r\n\r\n        super();\r\n        this.$mdDialog = $mdDialog;\r\n        this._injector = $injector;\r\n        this.theme = $rootScope['$theme'];\r\n\r\n        this.initTranslate()\r\n\r\n        this.selectedOption = _.find(this.options, {active: true}) || null;\r\n        let name: string = this.selectedOption ? this.selectedOption.name : this.selectedOptionName;\r\n        let index: number = _.findIndex(this.options, (opt: OptionsBigDialogData) => {\r\n            return opt.name == name;\r\n        });\r\n        this.optionIndex = index == -1 ? 0 : index;\r\n        this.selectedOption = this.options[this.optionIndex];\r\n        this.selectedOptionName = this.selectedOption.name;\r\n\r\n        setTimeout(this.focusInput, 500);\r\n    }\r\n\r\n    private initTranslate(): void {\r\n        let pipTranslate: pip.services.ITranslateService;\r\n        pipTranslate = this._injector.has('pipTranslate') \r\n            ? <pip.services.ITranslateService>this._injector.get('pipTranslate') : null;\r\n\r\n        if (pipTranslate) {\r\n            pipTranslate.translations('en', { 'OPTIONS_TITLE': 'Choose Option' });\r\n            pipTranslate.translations('ru', { 'OPTIONS_TITLE': 'Выберите опцию' });\r\n\r\n            this.title =  pipTranslate.translate(this.title) || pipTranslate.translate('OPTIONS_TITLE');\r\n            this.ok = pipTranslate.translate(this.ok) || pipTranslate.translate('SELECT');\r\n        } else {\r\n            this.title = this.title || 'Choose Option';\r\n            this.ok = this.ok || 'Select';\r\n        }        \r\n    }\r\n\r\n    public onOk(): void {\r\n        this.$mdDialog.hide();\r\n    }\r\n\r\n    public onCancel(): void {\r\n        this.$mdDialog.cancel();\r\n    }\r\n\r\n    public onOptionSelect(event: ng.IAngularEvent, option: OptionsBigDialogData) {\r\n        event.stopPropagation();\r\n        this.selectedOptionName = option.name;\r\n\r\n        if (this.noActions) {\r\n            this.onSelect();\r\n        }\r\n    }\r\n\r\n    public onSelected() {\r\n        this.selectedOptionName = this.options[this.optionIndex].name;\r\n\r\n        if (this.noActions) {\r\n               this.onSelect();\r\n        }\r\n    }\r\n\r\n    public onKeyUp(event: JQueryKeyEventObject, index: number) {\r\n        if (event.keyCode === 32 || event.keyCode === 13) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n            if (index !== undefined && index > -1 && index < this.options.length) {\r\n                this.selectedOptionName = this.options[index].name;\r\n                this.onSelect();\r\n            }\r\n        }\r\n    }\r\n    \r\n    public onSelect = function () {\r\n        let option: OptionsBigDialogData;\r\n        option = <OptionsBigDialogData>_.find(this.options, { name: this.selectedOptionName }) || new OptionsBigDialogData();\r\n        this.$mdDialog.hide({ option: option });\r\n    };\r\n\r\n    private focusInput() {\r\n        let list;\r\n        list = $('.pip-options-dialog .pip-list');\r\n        list.focus();\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipOptionsBigDialog')\r\n    .controller('pipOptionsBigDialogController', OptionsBigDialogController);\r\n","export class OptionsBigDialogData {\r\n    public name: string;\r\n    public title: string;\r\n    public subtitle: string;\r\n}\r\n","import { OptionsBigDialogData } from './OptionsBigDialogData';\r\n\r\nexport class OptionsBigDialogParams {\r\n    // Mouse event\r\n    public event?: MouseEvent;   \r\n    // Dialog title \r\n    public title?: string;  \r\n    // confirm button title\r\n    public ok?: string;\r\n    // Dialog options array\r\n    public options?: OptionsBigDialogData[];\r\n    // Selected option by default\r\n    public selectedOption?: OptionsBigDialogData;\r\n    // Selected Option Name\r\n    public selectedOptionName?: string;    \r\n    // Dialog hint title\r\n    public hint?: string;\r\n    // Show title\r\n    public noTitle;\r\n    // Show action button\r\n    public noActions;\r\n}\r\n\r\n","import { OptionsBigDialogData } from './OptionsBigDialogData';\r\n\r\nexport class OptionsBigDialogResult {\r\n    public option: OptionsBigDialogData;\r\n    public isCheckboxOption: boolean;\r\n}\r\n","import { OptionsBigDialogParams } from './OptionsBigDialogParams';\r\nimport { OptionsBigDialogResult } from './OptionsBigDialogResult';\r\nimport { IOptionsBigDialogService } from './IOptionsBigDialogService';\r\n\r\nclass OptionsBigDialogService implements IOptionsBigDialogService {\r\n    public _mdDialog: angular.material.IDialogService;\r\n    constructor($mdDialog: angular.material.IDialogService) {\r\n        this._mdDialog = $mdDialog;\r\n    }\r\n    public show(params, successCallback?: (result: OptionsBigDialogResult) => void, cancelCallback?: () => void): any {\r\n         this._mdDialog.show({\r\n            targetEvent: params.event,\r\n            templateUrl: 'options_big/OptionsBigDialog.html',\r\n            controller: 'pipOptionsBigDialogController',\r\n            controllerAs: '$ctrl',\r\n            locals: params,\r\n            bindToController: true,        \r\n            clickOutsideToClose: true\r\n         })\r\n        .then((result: OptionsBigDialogResult) => {\r\n            if (successCallback) {\r\n                successCallback(result);\r\n            }\r\n        }, \r\n        () => {\r\n            if (cancelCallback) {\r\n                cancelCallback();\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipOptionsBigDialog')\r\n    .service('pipOptionsBigDialog', OptionsBigDialogService);","angular\r\n    .module('pipOptionsBigDialog', [\r\n        'ngMaterial', \r\n        'pipDialogs.Translate',\r\n        'pipDialogs.Templates']);\r\n\r\nimport './OptionsBigDialogParams';\r\nimport './OptionsBigDialogData';\r\nimport './OptionsBigDialogResult';\r\nimport './OptionsBigDialogController';\r\nimport './OptionsBigDialogService';\r\n\r\n\r\nexport * from './OptionsBigDialogParams';\r\nexport * from './OptionsBigDialogData';\r\nexport * from './OptionsBigDialogResult';\r\nexport * from './IOptionsBigDialogService';\r\n","(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('confirmation/ConfirmationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-confirmation-dialog layout-column\" width=\"400\" md-theme=\"{{ ::$ctrl.theme }}\"><div class=\"pip-header\"><h3>{{ :: $ctrl.title }}</h3></div><div class=\"pip-footer\"><div><md-button ng-click=\"$ctrl.onCancel()\">{{ :: $ctrl.cancel }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onOk()\">{{ :: $ctrl.ok }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('error_details/ErrorDetailsDialog.html',\n    '<md-dialog class=\"pip-dialog pip-error-details-dialog layout-column\" width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><div class=\"pip-body\"><div class=\"pip-header\"><h3>{{ ::$ctrl.strings.errorDetails | translate }}</h3></div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"$ctrl.error.code || ($ctrl.error.data && $ctrl.error.data.code)\">{{ ::$ctrl.strings.errorCode | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.code || ($ctrl.error.data && $ctrl.error.data.code)\">{{ $ctrl.error.code || $ctrl.error.data.code }}</div><div class=\"layout-row layout-align-start-center error-section text-body2 color-secondary-text\" ng-if=\"$ctrl.error.path || ($ctrl.error.data && $ctrl.error.data.path)\">{{ ::$ctrl.strings.errorPath | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.path || ($ctrl.error.data && $ctrl.error.data.path)\">{{ $ctrl.error.path || $ctrl.error.data.path }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.isString($ctrl.error) || $ctrl.error.error || ($ctrl.error.data && $ctrl.error.data.error)\">{{ ::$ctrl.strings.errorText | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.error || ($ctrl.error.data && $ctrl.error.data.error)\">{{ $ctrl.getErrorText() }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.error.method || ($ctrl.error.data && $ctrl.error.data.method)\">{{ ::$ctrl.strings.errorMethod | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.method || ($ctrl.error.data && $ctrl.error.data.method)\">{{ $ctrl.error.method || $ctrl.error.data.method }}</div><div class=\"error-section text-body2 color-secondary-text layout-row layout-align-start-center\" ng-if=\"$ctrl.error.message || ($ctrl.error.data && $ctrl.error.data.message)\">{{ ::$ctrl.strings.errorMessage | translate }}</div><div class=\"layout-row layout-align-start-center text-subhead1\" ng-if=\"$ctrl.error.message || ($ctrl.error.data && $ctrl.error.data.message)\">{{ $ctrl.error.message || $ctrl.error.data.message }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent m0\" ng-click=\"$ctrl.onOk()\">{{ ::$ctrl.dismissButton | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('information/InformationDialog.html',\n    '<md-dialog class=\"pip-dialog pip-information-dialog layout-column\" width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><div class=\"pip-header\"><h3>{{:: $ctrl.title | translate }}</h3></div><div class=\"pip-body\"><div class=\"pip-content\">{{ $ctrl.content }}</div></div><div class=\"pip-footer\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onOk()\">{{ $ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options/OptionsDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog layout-column\" min-width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body lp0 tp0 rp0 bp24 pip-scroll\"><div class=\"pip-header\"><h3>{{ ::$ctrl.title | translate }}</h3><div ng-show=\"$ctrl.checkboxOptionCaption\" class=\"header-option text-subhead1 divider-bottom\"><md-checkbox ng-model=\"$ctrl.isCheckboxOption\" aria-label=\"CHECKBOX\">{{ ::$ctrl.checkboxOptionCaption | translate }}</md-checkbox></div></div><div class=\"pip-content\"><md-radio-group ng-model=\"$ctrl.selectedOptionName\" class=\"pip-list md-primary\" md-no-ink=\"true\" ng-keypress=\"$ctrl.onKeyPress($event)\" tabindex=\"0\"><div ng-repeat=\"option in $ctrl.options\" class=\"pip-list-item\" md-ink-ripple=\"\" ui-event=\"{ click: \\'$ctrl.onOptionSelect($event, option)\\' }\" ng-class=\"{ selected: option.name == $ctrl.selectedOptionName }\"><div class=\"pip-list-item item-padding\"><md-icon class=\"pip-option-icon\" md-svg-icon=\"icons:{{ option.icon }}\" ng-if=\"option.icon\"></md-icon><div class=\"pip-option-title\">{{ ::option.title | translate }}</div><md-radio-button ng-value=\"option.name\" tabindex=\"-1\" aria-label=\"{{ ::option.title | translate }}\"></md-radio-button></div></div></md-radio-group></div></md-dialog-content><div class=\"pip-footer\"><div><md-button class=\"pip-cancel\" ng-click=\"$ctrl.onCancel()\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"$ctrl.onSelect()\">{{ ::$ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDialogs.Templates');\n} catch (e) {\n  module = angular.module('pipDialogs.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('options_big/OptionsBigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-options-dialog-big layout-column\" min-width=\"400\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body pip-scroll\" ng-class=\"{\\'bp24\\': !$ctrl.noActions}\"><div class=\"pip-header\" ng-class=\"{\\'header-hint\\': $ctrl.noTitle && $ctrl.hint}\"><h3 class=\"m0\" ng-if=\"!$ctrl.noTitle\">{{ ::$ctrl.title | translate }}</h3><div ng-show=\"$ctrl.noTitle && $ctrl.hint\" class=\"dialog-hint layout-row layout-align-start-center\"><div class=\"hint-icon-container flex-fixed\"><md-icon md-svg-icon=\"icons:info-circle-outline\"></md-icon></div><div>{{ ::$ctrl.hint | translate }}</div></div></div><div class=\"content-divider\" ng-if=\"!noTitle\"></div><div class=\"pip-content\"><div class=\"spacer8\" ng-if=\"noTitle && hint\"></div><md-list class=\"pip-menu pip-ref-list\" pip-selected=\"$ctrl.optionIndex\" index=\"{{ $ctrl.optionIndex }}\" pip-select=\"$ctrl.onSelected($event)\"><md-list-item class=\"pip-ref-list-item pip-selectable layout-row layout-align-start-center\" ng-class=\"{\\'selected md-focused\\' : option.name == $ctrl.selectedOptionName, \\'divider-bottom\\': $index != options.length - 1}\" md-ink-ripple=\"\" ng-keyup=\"$ctrl.onKeyUp($event, $index)\" ng-repeat=\"option in $ctrl.options\"><div class=\"pip-content content-stretch\" ng-click=\"$ctrl.onOptionSelect($event, option)\"><p class=\"pip-title spacer-right\" ng-if=\"option.title\" style=\"margin-bottom: 4px !important;\">{{ ::option.title | translate }}</p><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.subtitle\">{{ ::option.subtitle | translate }}</div><div class=\"pip-subtitle spacer-right\" style=\"height: inherit\" ng-if=\"option.text\" ng-bind-html=\"option.text | translate\"></div></div></md-list-item></md-list></div><div class=\"spacer8\" ng-if=\"$ctrl.noActions\"></div></md-dialog-content><div class=\"pip-footer\" ng-if=\"!$ctrl.noActions\"><div><md-button class=\"pip-cancel\" ng-click=\"$ctrl.onCancel()\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"pip-submit md-accent\" ng-click=\"$ctrl.onSelect()\" style=\"margin-right: -6px\">{{ ::$ctrl.ok | translate }}</md-button></div></div></md-dialog>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dialogs-html.min.js.map\n"]}